{
  "version": 3,
  "sources": ["../src/files.js", "../src/screen.js", "../src/game.js", "../src/math/math-utils.js", "../src/graphics/texture.js", "../src/graphics/font.js", "../src/graphics/shader.js", "../src/graphics.js", "../src/graphics/_index.js", "../node_modules/gl-matrix/esm/index.js", "../node_modules/gl-matrix/esm/common.js", "../node_modules/gl-matrix/esm/mat2.js", "../node_modules/gl-matrix/esm/mat2d.js", "../node_modules/gl-matrix/esm/mat3.js", "../node_modules/gl-matrix/esm/mat4.js", "../node_modules/gl-matrix/esm/quat.js", "../node_modules/gl-matrix/esm/vec3.js", "../node_modules/gl-matrix/esm/vec4.js", "../node_modules/gl-matrix/esm/quat2.js", "../node_modules/gl-matrix/esm/vec2.js", "../src/graphics/camera.js", "../src/graphics/mesh.js", "../src/graphics/shader-instance.js", "../src/graphics/drawable.js", "../src/graphics/perspective-camera.js", "../src/graphics/meshes/_index.js", "../src/graphics/meshes/cube.js", "../src/graphics/meshes/plane.js", "../src/graphics/meshes/quad.js", "../src/math/linear-spline.js", "../src/graphics/meshes/sphere.js", "../src/graphics/orthographic-camera.js", "../src/graphics/sprite.js", "../src/graphics/text-drawable.js", "../src/graphics/particle-system.js", "../src/graphics/batch.js", "../src/graphics/drawable-group.js", "../src/input.js", "../src/math/_index.js", "../src/math/rectangle.js", "../src/audio-manager.js", "../src/device.js", "../src/gol.js"],
  "sourcesContent": ["import { Gol } from \"./gol\";\r\n\r\nclass Files {\r\n\r\n    /**\r\n     * \r\n     * @type {Map<string, HTMLImageElement | HTMLAudioElement | AudioBuffer>}\r\n     */\r\n    assets = new Map();\r\n\r\n    /**\r\n     * \r\n     * @type {number}\r\n     */\r\n    toLoad = 0;\r\n\r\n    loadImage(name, url) {\r\n        const image = new Image();\r\n        image.src = url;\r\n        image.crossOrigin = \"Anonymous\";\r\n        const promise = new Promise(resolve => {\r\n            image.onload = () => {\r\n                resolve(image);\r\n            }\r\n        })\r\n        this.addAsync(name, promise);\r\n        return promise;\r\n    }\r\n\r\n    loadAudio(name, url) {\r\n        const promise = fetch(url)\r\n            .then(response => response.arrayBuffer()).then(data => Gol.audio.audioContext.decodeAudioData(data));\r\n        this.addAsync(name, promise);\r\n        return promise;\r\n    }\r\n\r\n    addAsync(name, promise) {\r\n        ++this.toLoad;\r\n        promise.then(asset => {\r\n            this.assets.set(name, asset);\r\n            --this.toLoad;\r\n        });\r\n    }\r\n\r\n    waitForAssetsToLoad() {\r\n        return new Promise(resolve => {\r\n            const wait = () => {\r\n                if(this.toLoad == 0) {\r\n                    resolve(this.assets);\r\n                } else {\r\n                    setTimeout(() => {\r\n                        wait();\r\n                    }, 250);\r\n                }\r\n            }\r\n            wait();\r\n        });\r\n    }\r\n\r\n    get(name) {\r\n        return this.assets.get(name);\r\n    }\r\n\r\n}\r\n\r\nexport {\r\n    Files\r\n}", "/**\r\n * Represents one of game screens, such as a main menu, a settings menu, the game screen and so on.\r\n * \r\n * @author DonDejvo\r\n * \r\n * @see Game\r\n */\r\nclass Screen {\r\n\r\n    constructor() {\r\n        this.create();\r\n    }\r\n\r\n    create() {}\r\n\r\n    /**\r\n     * Called when this screen becomes the current screen for a {@link Game}.\r\n     */\r\n    show() {}\r\n\r\n    /**\r\n     * Called when this screen is no longer current scene for a {@link Game}.\r\n     */\r\n    hide() {}\r\n\r\n    /**\r\n     * @see Game#resize\r\n     */\r\n    resize(width, height) {}\r\n\r\n    /**\r\n     * Called when the screen should render itself.\r\n     * \r\n     * @param {number} delta the time in seconds since the last render\r\n     */\r\n    render(delta) {}\r\n\r\n    dispose() {}\r\n\r\n}\r\n\r\nexport {\r\n    Screen\r\n}", "import { Screen } from \"./screen.js\";\r\n\r\n/**\r\n * <p>An instance of <code>Game</code> must be passed into initialization.</p>\r\n * <p>All methods are called after WebGL context exists. So you can safely create and manipulate graphics resources.</p>\r\n * <p>This allows easily to have multiple screens.</p>\r\n * \r\n * @author DonDejvo\r\n */\r\nclass Game {\r\n\r\n    /**\r\n     * \r\n     * @type {Screen}\r\n     */\r\n    screen = null;\r\n\r\n    constructor() {}\r\n\r\n    /**\r\n     * \r\n     */\r\n    preload() {}\r\n\r\n    /**\r\n     * Called right after initialization.\r\n     */\r\n    create() {}\r\n\r\n    /**\r\n     * Called when window is resized.\r\n     * \r\n     * @param {number} width the new width in pixels\r\n     * @param {number} height the new height in pixels\r\n     */\r\n    resize(width, height) {\r\n        if(this.screen) {\r\n            this.screen.resize(width, height);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Called when the game should render itself.\r\n     * \r\n     * @param {number} delta the time in seconds since the last render\r\n     */\r\n    render(delta) {\r\n        if(this.screen) {\r\n            this.screen.render(delta);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the current screen. {@link Screen#hide} is called on any old \r\n     * screen and {@link Screen#show} is called on the new screen.\r\n     * \r\n     * @param {Screen} screen may be {@code null}\r\n     */\r\n    setScreen(screen) {\r\n        if(this.screen) {\r\n            this.screen.hide();\r\n        }\r\n        this.screen = screen;\r\n        this.screen.show();\r\n    }\r\n\r\n}\r\n\r\nexport {\r\n    Game\r\n}", "\r\nclass MathUtils {\r\n\r\n    static lerp(x, a, b) {\r\n        return (b - a) * x + a;\r\n    }\r\n\r\n    static rand(min, max) {\r\n        return Math.random() * (max - min) + min;\r\n    }\r\n\r\n    static randInt(min, max) {\r\n        return Math.floor(this.rand(min, max + 1));\r\n    }\r\n\r\n    static clamp(x, a, b) {\r\n        return Math.min(Math.max(x, a), b);\r\n    }\r\n\r\n    static sat(x) {\r\n        return this.clamp(x, 0, 1);\r\n    }\r\n\r\n    static shuffle(arr) {\r\n        for(let i = 0; i < arr.length; ++i) {\r\n            const idx = this.randInt(0, arr.length - 1);\r\n            [arr[i], arr[idx]] = [arr[idx], arr[i]];\r\n        }\r\n    }\r\n\r\n    static choice(arr) {\r\n        return arr[this.randInt(0, arr.length - 1)];\r\n    }\r\n\r\n    static isPowerOf2(x) {\r\n        return (x & (x - 1)) == 0;\r\n    }\r\n\r\n    static max(arr) {\r\n        return Math.max(...arr);\r\n    }\r\n\r\n    static min(arr) {\r\n        return Math.min(...arr);\r\n    }\r\n\r\n    static avg(arr) {\r\n        return arr.reduce((acc, a) => acc + a) / arr.length;\r\n    }\r\n\r\n    static step(edge1, edge2, x) {\r\n        return (x - edge1) / (edge2 - edge1);\r\n    }\r\n\r\n}\r\n\r\nexport {\r\n    MathUtils\r\n}", "import { Gol } from \"../gol.js\";\r\nimport { MathUtils } from \"../math/math-utils.js\";\r\n\r\nclass Texture {\r\n\r\n    /**\r\n     * \r\n     * @type {WebGLTexture}\r\n     */\r\n    id;\r\n\r\n    /**\r\n     * \r\n     * @type {TexImageSource}\r\n     */\r\n    data;\r\n\r\n    /**\r\n     * \r\n     * @param {TexImageSource} data \r\n     */\r\n    constructor(data, params = {}) {\r\n        this.data = data;\r\n\r\n        this.id = Gol.gl.createTexture();\r\n\r\n        Gol.gl.bindTexture(Gol.gl.TEXTURE_2D, this.id);\r\n        Gol.gl.texImage2D(Gol.gl.TEXTURE_2D, 0, Gol.gl.RGBA, Gol.gl.RGBA, Gol.gl.UNSIGNED_BYTE, data);\r\n\r\n        if(MathUtils.isPowerOf2(data.width) && MathUtils.isPowerOf2(data.height)) {\r\n            Gol.gl.generateMipmap(Gol.gl.TEXTURE_2D);\r\n        }\r\n\r\n        Gol.gl.bindTexture(Gol.gl.TEXTURE_2D, null);\r\n\r\n        this.setFilter(params.filter || Gol.gl.LINEAR);\r\n        this.setWrap(params.wrap || Gol.gl.CLAMP_TO_EDGE);\r\n    }\r\n\r\n    setFilter(filter) {\r\n        Gol.gl.bindTexture(Gol.gl.TEXTURE_2D, this.id);\r\n        Gol.gl.texParameteri(Gol.gl.TEXTURE_2D, Gol.gl.TEXTURE_MIN_FILTER, filter);\r\n        Gol.gl.texParameteri(Gol.gl.TEXTURE_2D, Gol.gl.TEXTURE_MAG_FILTER, filter == Gol.gl.NEAREST ? Gol.gl.NEAREST : Gol.gl.LINEAR);\r\n        Gol.gl.bindTexture(Gol.gl.TEXTURE_2D, null);\r\n    }\r\n\r\n    setWrap(wrap) {\r\n        Gol.gl.bindTexture(Gol.gl.TEXTURE_2D, this.id);\r\n        Gol.gl.texParameteri(Gol.gl.TEXTURE_2D, Gol.gl.TEXTURE_WRAP_S, wrap);\r\n        Gol.gl.texParameteri(Gol.gl.TEXTURE_2D, Gol.gl.TEXTURE_WRAP_T, wrap);\r\n        Gol.gl.bindTexture(Gol.gl.TEXTURE_2D, null);\r\n    }\r\n\r\n    bind() {\r\n        Gol.gl.bindTexture(Gol.gl.TEXTURE_2D, this.id);\r\n    }\r\n\r\n    dispose() {\r\n        Gol.gl.deleteTexture(this.id);\r\n    }\r\n\r\n    get width() {\r\n        return this.data.width;\r\n    }\r\n\r\n    get height() {\r\n        return this.data.height;\r\n    }\r\n}\r\n\r\nexport {\r\n    Texture\r\n}", "import { Gol } from \"../gol.js\";\r\nimport { Texture } from \"./texture.js\";\r\n\r\nclass Font {\r\n\r\n    /**\r\n     * \r\n     * @type {Object}\r\n     */\r\n    options;\r\n\r\n    /**\r\n     * \r\n     */\r\n    columns = 10;\r\n\r\n    /**\r\n     * \r\n     */\r\n    charFrom = 32;\r\n\r\n    /**\r\n     * \r\n     */\r\n    charTo = 126;\r\n\r\n    /**\r\n     * \r\n     * @type {HTMLCanvasElement}\r\n     */\r\n    bitmap;\r\n\r\n    /**\r\n     * \r\n     * @type {Texture}\r\n     */\r\n    texture;\r\n\r\n    charWidth;\r\n\r\n    charHeight;\r\n\r\n    constructor(opts) {\r\n        this.options = opts;\r\n\r\n        this.charWidth = opts.fontSize * opts.charRatio;\r\n        this.charHeight = opts.fontSize * 1.2;\r\n        \r\n        this.bitmap = this.generateBitmap();\r\n        this.texture = new Texture(this.bitmap, {\r\n            filter: Gol.gl.LINEAR_MIPMAP_LINEAR\r\n        });\r\n    }\r\n\r\n    generateBitmap() {\r\n        const bitmap = document.createElement(\"canvas\");\r\n\r\n        const charCount = this.charTo - this.charFrom + 1;\r\n        const rows = Math.floor(charCount / this.columns);\r\n        \r\n        bitmap.width = 2 ** Math.ceil(Math.log2(this.columns * this.charWidth));\r\n        bitmap.height = 2 ** Math.ceil(Math.log2(rows * this.charHeight));\r\n\r\n        const ctx = bitmap.getContext(\"2d\");\r\n\r\n        ctx.textBaseline = \"middle\";\r\n        ctx.textAlign = \"center\";\r\n        ctx.fillStyle = \"white\";\r\n\r\n        ctx.font = `${this.options.fontSize}px ${this.options.fontFamily}`;\r\n\r\n        for(let i = 0; i < charCount; ++i) {\r\n            const char = String.fromCharCode(i + this.charFrom);\r\n            \r\n            const x = (i % this.columns + 0.5) * this.charWidth;\r\n            const y = (Math.floor(i / this.columns) + 0.5) * this.charHeight;\r\n        \r\n            ctx.fillText(char, x, y);\r\n        }\r\n\r\n        return bitmap;\r\n    }\r\n\r\n    getCharPosition(char) {\r\n        if(char < this.charFrom || char > this.charTo) {\r\n            return null;\r\n        } \r\n\r\n        const idx = char - this.charFrom;\r\n\r\n        return [\r\n            (idx % this.columns) * this.charWidth,\r\n            Math.floor(idx / this.columns) * this.charHeight\r\n        ];\r\n    }\r\n\r\n}\r\n\r\nexport {\r\n    Font\r\n}", "import { Gol } from \"../gol.js\";\r\n\r\nclass Shader {\r\n\r\n    /**\r\n     * \r\n     * @type {WebGLProgram}\r\n     */\r\n    program;\r\n\r\n    /**\r\n     * \r\n     * @param {string} vsrc Vertex source \r\n     * @param {string} fsrc Fragment source\r\n     */\r\n    constructor(vsrc, fsrc) {\r\n        const vshader = this.compileShader(vsrc, Gol.gl.VERTEX_SHADER);\r\n        const fshader = this.compileShader(fsrc, Gol.gl.FRAGMENT_SHADER);\r\n\r\n        this.program = Gol.gl.createProgram();\r\n        Gol.gl.attachShader(this.program, vshader);\r\n        Gol.gl.attachShader(this.program, fshader);\r\n        Gol.gl.linkProgram(this.program);\r\n\r\n        if (!Gol.gl.getProgramParameter(this.program, Gol.gl.LINK_STATUS)) {\r\n            console.log(Gol.gl.getProgramInfoLog(this.program));\r\n            throw new Error(\"program unable to link\");\r\n        }\r\n\r\n        this.attribs = {\r\n            positions: Gol.gl.getAttribLocation(this.program, \"position\"),\r\n            normals: Gol.gl.getAttribLocation(this.program, \"normal\"),\r\n            colors: Gol.gl.getAttribLocation(this.program, \"color\"),\r\n            uvs: Gol.gl.getAttribLocation(this.program, \"uv\"),\r\n            sizes: Gol.gl.getAttribLocation(this.program, \"size\")\r\n        };\r\n\r\n        this.uniforms = [\r\n            {\r\n                name: \"projectionMatrix\",\r\n                type: \"mat4\",\r\n                location: Gol.gl.getUniformLocation(this.program, \"projectionMatrix\")\r\n            },\r\n            {\r\n                name: \"modelViewMatrix\",\r\n                type: \"mat4\",\r\n                location: Gol.gl.getUniformLocation(this.program, \"modelViewMatrix\"),\r\n            },\r\n            {\r\n                name: \"modelMatrix\",\r\n                type: \"mat4\",\r\n                location: Gol.gl.getUniformLocation(this.program, \"modelMatrix\"),\r\n            },\r\n            {\r\n                name: \"normalMatrix\",\r\n                type: \"mat3\",\r\n                location: Gol.gl.getUniformLocation(this.program, \"normalMatrix\"),\r\n            },\r\n            {\r\n                name: \"lightColor\",\r\n                type: \"vec3\",\r\n                location: Gol.gl.getUniformLocation(this.program, \"lightColor\"),\r\n            },\r\n            {\r\n                name: \"lightDirection\",\r\n                type: \"vec3\",\r\n                location: Gol.gl.getUniformLocation(this.program, \"lightDirection\"),\r\n            },\r\n            {\r\n                name: \"lightPosition\",\r\n                type: \"vec3\",\r\n                location: Gol.gl.getUniformLocation(this.program, \"lightPosition\"),\r\n            },\r\n            {\r\n                name: \"cameraPosition\",\r\n                type: \"vec3\",\r\n                location: Gol.gl.getUniformLocation(this.program, \"cameraPosition\"),\r\n            },\r\n            {\r\n                name: \"pointMultiplier\",\r\n                type: \"float\",\r\n                location: Gol.gl.getUniformLocation(this.program, \"pointMultiplier\")\r\n            },\r\n            {\r\n                name: \"ambientColor\",\r\n                type: \"vec3\",\r\n                location: Gol.gl.getUniformLocation(this.program, \"ambientColor\")\r\n            },\r\n            {\r\n                name: \"uvOffset\",\r\n                type: \"vec2\",\r\n                location: Gol.gl.getUniformLocation(this.program, \"uvOffset\")\r\n            },\r\n            {\r\n                name: \"fogColor\",\r\n                type: \"vec3\",\r\n                location: Gol.gl.getUniformLocation(this.program, \"fogColor\")\r\n            },\r\n            {\r\n                name: \"fogNear\",\r\n                type: \"float\",\r\n                location: Gol.gl.getUniformLocation(this.program, \"fogNear\")\r\n            },\r\n            {\r\n                name: \"fogFar\",\r\n                type: \"float\",\r\n                location: Gol.gl.getUniformLocation(this.program, \"fogFar\")\r\n            },\r\n            {\r\n                name: \"fogTime\",\r\n                type: \"float\",\r\n                location: Gol.gl.getUniformLocation(this.program, \"fogTime\")\r\n            }\r\n        ];\r\n    }\r\n\r\n    activate() {\r\n        Gol.gl.useProgram(this.program);\r\n    }\r\n\r\n    compileShader(src, type) {\r\n        const shader = Gol.gl.createShader(type);\r\n\r\n        Gol.gl.shaderSource(shader, src);\r\n        Gol.gl.compileShader(shader);\r\n\r\n        if (!Gol.gl.getShaderParameter(shader, Gol.gl.COMPILE_STATUS)) {\r\n            console.log(Gol.gl.getShaderInfoLog(shader));\r\n            console.log(src);\r\n            throw new Error(\"shader unable to compile\");\r\n        }\r\n        return shader;\r\n    }\r\n\r\n    dispose() {\r\n        \r\n    }\r\n\r\n    static create(type, opts = {}) {\r\n\r\n        const floatPrecision = \"precision mediump float;\";\r\n\r\n        const applyCustomProcessPosition = (vs) => {\r\n            return vs.replace(\"{{USER}}\", opts.onCustomProcessPosition === undefined ? \"\" : opts.onCustomProcessPosition);\r\n        }\r\n        const useFog = opts.useFog === true ? \"#define USE_FOG\" : \"\";\r\n        const hasCustomUniforms = Array.isArray(opts.uniforms);\r\n\r\n        let vertUniforms = \"\";\r\n        let fragUniforms = \"\";\r\n        if(hasCustomUniforms) {\r\n            opts.uniforms.forEach(e => {\r\n                const str = `\\tuniform ${e.type} ${e.name};\\n`;\r\n                switch(e.shader) {\r\n                    case \"vert\":\r\n                        vertUniforms += str;\r\n                        break;\r\n                    case \"frag\":\r\n                        fragUniforms += str;\r\n                        break;\r\n                }\r\n            });\r\n        }\r\n\r\n        let vsrc, fsrc;\r\n\r\n        switch(type) {\r\n            case this.Type.SIMPLE: {\r\n                vsrc = [\r\n                    vertUniforms,\r\n                    useFog,\r\n                    applyCustomProcessPosition(this.SIMPLE_VS)\r\n                ].join(\"\\n\");\r\n\r\n                fsrc = [\r\n                    floatPrecision,\r\n                    fragUniforms,\r\n                    useFog,\r\n                    this.SIMPLE_FS\r\n                ].join(\"\\n\");\r\n\r\n                break;\r\n            }\r\n            case this.Type.TEXTURE: {\r\n                vsrc = [\r\n                    vertUniforms,\r\n                    useFog,\r\n                    applyCustomProcessPosition(this.TEXTURE_VS)\r\n                ].join(\"\\n\");\r\n\r\n                fsrc = [\r\n                    floatPrecision,\r\n                    fragUniforms,\r\n                    useFog,\r\n                    this.TEXTURE_FS\r\n                ].join(\"\\n\");\r\n\r\n                break;\r\n            }  \r\n            case this.Type.PARTICLE: {\r\n                vsrc = [\r\n                    vertUniforms,\r\n                    this.PARTICLE_VS\r\n                ].join(\"\\n\");\r\n\r\n                fsrc = [\r\n                    floatPrecision,\r\n                    fragUniforms,\r\n                    this.PARTICLE_FS\r\n                ].join(\"\\n\");\r\n\r\n                break;\r\n            }\r\n            default: {\r\n                throw new Error(\"Type not found: \" + type);\r\n            }\r\n        }\r\n\r\n        const shader = new Shader(vsrc, fsrc);\r\n\r\n        if(hasCustomUniforms) {\r\n            for(let uniform of opts.uniforms) {\r\n                shader.uniforms.push({\r\n                    name: uniform.name,\r\n                    type: uniform.type,\r\n                    location: Gol.gl.getUniformLocation(shader.program, uniform.name)\r\n                });\r\n            }\r\n        }\r\n\r\n        return shader;\r\n\r\n    }\r\n\r\n    static Type = Object.freeze({\r\n        SIMPLE: \"simple\",\r\n        TEXTURE: \"texture\",\r\n        PARTICLE: \"particle\"\r\n    });\r\n\r\n    static PROC_POS_FUNC = `\r\n    vec3 proc_pos(vec3 position) {\r\n        {{USER}}\r\n        return position;\r\n    }\r\n    `;\r\n\r\n    static FOG_VERT_PARAMS = `\r\n    #ifdef USE_FOG\r\n    varying vec3 vWorldPosition;\r\n    #endif\r\n    `;\r\n\r\n    static FOG_VERT = `\r\n    #ifdef USE_FOG\r\n    vWorldPosition = worldPosition.xyz;\r\n    #endif\r\n    `;\r\n\r\n    static FOG_FRAG_PARAMS = `\r\n    #ifdef USE_FOG\r\n    varying vec3 vWorldPosition;\r\n    uniform vec3 fogColor;\r\n    uniform float fogNear;\r\n    uniform float fogFar;\r\n    uniform float fogTime;\r\n    #endif\r\n    `;\r\n\r\n    static FOG_FRAG = `\r\n    #ifdef USE_FOG\r\n    vec3 fogDirection = normalize(vWorldPosition);\r\n    float fogDepth = length(vWorldPosition);\r\n\r\n    float fogFactor = smoothstep(fogNear, fogFar, fogDepth);\r\n    fogFactor = clamp(fogFactor, 0.0, 1.0);\r\n\r\n    gl_FragColor = mix( gl_FragColor, vec4(fogColor, fogAlpha), fogFactor);\r\n    #endif\r\n    `;\r\n\r\n    static SIMPLE_VS = `\r\n    uniform mat4 modelViewMatrix;\r\n    uniform mat4 projectionMatrix;\r\n\r\n    attribute vec3 position;\r\n    attribute vec4 color;\r\n\r\n    varying vec4 vColor;\r\n\r\n    ${this.FOG_VERT_PARAMS}\r\n\r\n    ${this.PROC_POS_FUNC}\r\n\r\n    void main(void) {\r\n        vec4 worldPosition = modelViewMatrix * vec4(proc_pos(position), 1.0);\r\n        gl_Position = projectionMatrix * worldPosition;\r\n        vColor = color;\r\n        ${this.FOG_VERT}\r\n    }\r\n    `;\r\n\r\n    static SIMPLE_FS = `\r\n    varying vec4 vColor;\r\n    uniform vec3 ambientColor;\r\n    uniform vec3 cameraPosition;\r\n\r\n    ${this.FOG_FRAG_PARAMS}\r\n\r\n    void main(void) {\r\n        gl_FragColor = vec4(vColor.rgb * ambientColor, vColor.a);\r\n        float fogAlpha = 1.0;\r\n        ${this.FOG_FRAG}\r\n    }\r\n    `;\r\n\r\n    static TEXTURE_VS = `\r\n    uniform mat4 modelViewMatrix;\r\n    uniform mat4 projectionMatrix;\r\n\r\n    attribute vec3 position;\r\n    attribute vec4 color;\r\n    attribute vec2 uv;\r\n\r\n    varying vec4 vColor;\r\n    varying vec2 vUv;\r\n    \r\n    ${this.FOG_VERT_PARAMS}\r\n\r\n    ${this.PROC_POS_FUNC}\r\n\r\n    void main(void) {\r\n        vec4 worldPosition = modelViewMatrix * vec4(proc_pos(position), 1.0);\r\n        gl_Position = projectionMatrix * worldPosition;\r\n        vColor = color;\r\n        vUv = uv;\r\n        ${this.FOG_VERT}\r\n    }\r\n    `;\r\n\r\n    static TEXTURE_FS = ` \r\n    varying vec4 vColor;\r\n    varying vec2 vUv;\r\n\r\n    uniform sampler2D tex;\r\n    uniform vec3 ambientColor;\r\n    uniform vec2 uvOffset;\r\n    uniform vec3 cameraPosition;\r\n\r\n    ${this.FOG_FRAG_PARAMS}\r\n\r\n    void main(void) {\r\n        vec4 texColor = texture2D(tex, vUv + uvOffset);\r\n        gl_FragColor = vec4(vColor.rgb * texColor.rgb * ambientColor, texColor.a * vColor.a);\r\n        float fogAlpha = texColor.a;\r\n        ${this.FOG_FRAG}\r\n    }\r\n    `;\r\n\r\n    static PARTICLE_VS = `\r\n    attribute vec3 position;\r\n    attribute vec4 color;\r\n    attribute float size;\r\n    \r\n    uniform float pointMultiplier;\r\n    uniform mat4 projectionMatrix;\r\n    uniform mat4 modelViewMatrix;\r\n    \r\n    varying vec4 vColor;\r\n    \r\n    void main(void) {\r\n        vec4 worldPosition = modelViewMatrix * vec4(position, 1.0);\r\n        gl_Position = projectionMatrix * worldPosition;\r\n        gl_PointSize = size * pointMultiplier / gl_Position.w;\r\n        vColor = color;\r\n    }\r\n    `;\r\n\r\n    static PARTICLE_FS = `\r\n    varying vec4 vColor;\r\n\r\n    uniform sampler2D tex;\r\n    uniform vec3 ambientColor;\r\n    uniform vec3 cameraPosition;\r\n    \r\n    void main(void) {\r\n        vec4 texColor = texture2D(tex, gl_PointCoord);\r\n        gl_FragColor = vec4(vColor.rgb * texColor.rgb * ambientColor * texColor.a, texColor.a) * vColor.a;\r\n    }\r\n    `;\r\n}\r\n\r\nexport {\r\n    Shader\r\n}", "import { Game } from \"./game.js\";\r\nimport { Gol } from \"./gol.js\";\r\nimport { Font } from \"./graphics/font.js\";\r\nimport { Shader } from \"./graphics/shader.js\";\r\n\r\nclass Graphics {\r\n\r\n    /**\r\n     * \r\n     * @type {HTMLCanvasElement}\r\n     */\r\n    canvas;\r\n\r\n    /**\r\n     *  \r\n     * @type {WebGLRenderingContext}\r\n     */\r\n    gl;\r\n\r\n    /**\r\n     * \r\n     * @type {number}\r\n     */\r\n    frameId = null;\r\n\r\n    /**\r\n     * \r\n     *  @type {number} \r\n     */\r\n    width;\r\n\r\n    /** \r\n     * \r\n     * @type {number}\r\n     */\r\n    height;\r\n\r\n    /**\r\n     * \r\n     * @type {number}\r\n     */\r\n    delta = 0;\r\n\r\n    /**\r\n     * \r\n     * @type {number}\r\n     */\r\n    fps = 60;\r\n\r\n    /**\r\n     * \r\n     * @type {number}\r\n     */\r\n    lastFrameTime;\r\n\r\n    /**\r\n     * \r\n     * @type {number}\r\n     */\r\n    frameStart;\r\n\r\n    /**\r\n     * \r\n     * @type {number}\r\n     */\r\n    frames;\r\n\r\n    /**\r\n     * \r\n     * @type {Game}\r\n     */\r\n    game;\r\n\r\n    /**\r\n     * \r\n     * @type {Map<string, Shader>}\r\n     */\r\n    shaders = new Map();\r\n\r\n    /**\r\n     * \r\n     * @type {Map<string, Font>}\r\n     */\r\n    fonts = new Map();\r\n\r\n    constructor(game) {\r\n        this.game = game;\r\n\r\n        this.canvas = this.createCanvas();\r\n        this.canvas.width = this.width = innerWidth;\r\n        this.canvas.height = this.height = innerHeight;\r\n        this.gl = this.canvas.getContext(\"webgl\");\r\n    }\r\n\r\n    onResume() {\r\n        this.lastFrameTime = this.frameStart = performance.now();\r\n        this.frames = 0;\r\n        this.RAF();\r\n    }\r\n\r\n    createCanvas() {\r\n        const canvas = document.createElement(\"canvas\");\r\n        canvas.oncontextmenu = (ev) => {\r\n            ev.preventDefault();\r\n            ev.stopPropagation();\r\n        }\r\n        document.body.appendChild(canvas);\r\n        return canvas;\r\n    }\r\n\r\n    onResize() {\r\n        this.canvas.width = this.width = innerWidth;\r\n        this.canvas.height = this.height = innerHeight;\r\n\r\n        this.game.resize(this.width, this.height);\r\n    }\r\n\r\n    onDrawFrame() {\r\n        const time = performance.now();\r\n        this.delta = (time - this.lastFrameTime) * 0.001;\r\n        this.lastFrameTime = time;\r\n\r\n        Gol.input.update();\r\n\r\n        this.game.render(this.delta);\r\n\r\n        if (time - this.frameStart >= 1000) {\r\n\t\t\tthis.fps = this.frames;\r\n\t\t\tthis.frames = 0;\r\n\t\t\tthis.frameStart = time;\r\n\t\t}\r\n\t\t++this.frames;\r\n    }\r\n\r\n    RAF() {\r\n        this.frameId = requestAnimationFrame(() => {\r\n            this.RAF();\r\n            this.onDrawFrame();\r\n        });\r\n    }\r\n\r\n    compileShaders() {\r\n\r\n        this.shaders.set(\"simple\",\r\n            Shader.create(Shader.Type.SIMPLE));\r\n\r\n        this.shaders.set(\"texture\",\r\n        Shader.create(Shader.Type.TEXTURE));\r\n\r\n        this.shaders.set(\"particle\",\r\n        Shader.create(Shader.Type.PARTICLE));\r\n\r\n    }\r\n\r\n    generateFonts() {\r\n\r\n        this.fonts.set(\"Consolas\",\r\n            new Font({\r\n                fontFamily: \"Consolas\",\r\n                fontSize: 48,\r\n                charRatio: 0.6\r\n            }));\r\n\r\n    }\r\n\r\n    getShader(name) {\r\n        return this.shaders.get(name);\r\n    }\r\n\r\n    getFont(name) {\r\n        return this.fonts.get(name);\r\n    }\r\n\r\n}\r\n\r\nexport {\r\n    Graphics\r\n}", "import { Camera } from \"./camera.js\";\r\nimport { Drawable } from \"./drawable.js\";\r\nimport { Mesh } from \"./mesh.js\";\r\nimport { PerspectiveCamera } from \"./perspective-camera.js\";\r\nimport { ShaderInstance } from \"./shader-instance.js\";\r\nimport { Shader } from \"./shader.js\";\r\nimport { Texture } from \"./texture.js\";\r\nimport * as meshes from \"./meshes/_index.js\";\r\nimport { OrthographicCamera } from \"./orthographic-camera.js\";\r\nimport { Sprite } from \"./sprite.js\";\r\nimport { Font } from \"./font.js\";\r\nimport { TextDrawable } from \"./text-drawable.js\";\r\nimport { ParticleSystem, Particle } from \"./particle-system.js\";\r\nimport { Batch } from \"./batch.js\";\r\nimport { DrawableGroup } from \"./drawable-group.js\";\r\n\r\nexport {\r\n    Camera,\r\n    Drawable,\r\n    Mesh,\r\n    PerspectiveCamera,\r\n    OrthographicCamera,\r\n    Shader,\r\n    ShaderInstance,\r\n    Texture,\r\n    Sprite,\r\n    Font,\r\n    TextDrawable,\r\n    ParticleSystem,\r\n    Particle,\r\n    Batch,\r\n    DrawableGroup,\r\n    meshes\r\n}", "import * as glMatrix from \"./common.js\";\nimport * as mat2 from \"./mat2.js\";\nimport * as mat2d from \"./mat2d.js\";\nimport * as mat3 from \"./mat3.js\";\nimport * as mat4 from \"./mat4.js\";\nimport * as quat from \"./quat.js\";\nimport * as quat2 from \"./quat2.js\";\nimport * as vec2 from \"./vec2.js\";\nimport * as vec3 from \"./vec3.js\";\nimport * as vec4 from \"./vec4.js\";\nexport { glMatrix, mat2, mat2d, mat3, mat4, quat, quat2, vec2, vec3, vec4 };", "/**\n * Common utilities\n * @module glMatrix\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};", "import * as glMatrix from \"./common.js\";\n/**\n * 2x2 Matrix\n * @module mat2\n */\n\n/**\n * Creates a new identity mat2\n *\n * @returns {mat2} a new 2x2 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[0] = 1;\n  out[3] = 1;\n  return out;\n}\n/**\n * Creates a new mat2 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat2} a matrix to clone\n * @returns {mat2} a new 2x2 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Copy the values from one mat2 to another\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the source matrix\n * @returns {mat2} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set a mat2 to the identity matrix\n *\n * @param {mat2} out the receiving matrix\n * @returns {mat2} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\n * Create a new mat2 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\n * @returns {mat2} out A new 2x2 matrix\n */\n\nexport function fromValues(m00, m01, m10, m11) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m10;\n  out[3] = m11;\n  return out;\n}\n/**\n * Set the components of a mat2 to the given values\n *\n * @param {mat2} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\n * @returns {mat2} out\n */\n\nexport function set(out, m00, m01, m10, m11) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m10;\n  out[3] = m11;\n  return out;\n}\n/**\n * Transpose the values of a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the source matrix\n * @returns {mat2} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache\n  // some values\n  if (out === a) {\n    var a1 = a[1];\n    out[1] = a[2];\n    out[2] = a1;\n  } else {\n    out[0] = a[0];\n    out[1] = a[2];\n    out[2] = a[1];\n    out[3] = a[3];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the source matrix\n * @returns {mat2} out\n */\n\nexport function invert(out, a) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3]; // Calculate the determinant\n\n  var det = a0 * a3 - a2 * a1;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = a3 * det;\n  out[1] = -a1 * det;\n  out[2] = -a2 * det;\n  out[3] = a0 * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the source matrix\n * @returns {mat2} out\n */\n\nexport function adjoint(out, a) {\n  // Caching this value is nessecary if out == a\n  var a0 = a[0];\n  out[0] = a[3];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a0;\n  return out;\n}\n/**\n * Calculates the determinant of a mat2\n *\n * @param {ReadonlyMat2} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  return a[0] * a[3] - a[2] * a[1];\n}\n/**\n * Multiplies two mat2's\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the first operand\n * @param {ReadonlyMat2} b the second operand\n * @returns {mat2} out\n */\n\nexport function multiply(out, a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = a0 * b0 + a2 * b1;\n  out[1] = a1 * b0 + a3 * b1;\n  out[2] = a0 * b2 + a2 * b3;\n  out[3] = a1 * b2 + a3 * b3;\n  return out;\n}\n/**\n * Rotates a mat2 by the given angle\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2} out\n */\n\nexport function rotate(out, a, rad) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = a0 * c + a2 * s;\n  out[1] = a1 * c + a3 * s;\n  out[2] = a0 * -s + a2 * c;\n  out[3] = a1 * -s + a3 * c;\n  return out;\n}\n/**\n * Scales the mat2 by the dimensions in the given vec2\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the matrix to rotate\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\n * @returns {mat2} out\n **/\n\nexport function scale(out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var v0 = v[0],\n      v1 = v[1];\n  out[0] = a0 * v0;\n  out[1] = a1 * v0;\n  out[2] = a2 * v1;\n  out[3] = a3 * v1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat2.identity(dest);\n *     mat2.rotate(dest, dest, rad);\n *\n * @param {mat2} out mat2 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2} out\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = -s;\n  out[3] = c;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat2.identity(dest);\n *     mat2.scale(dest, dest, vec);\n *\n * @param {mat2} out mat2 receiving operation result\n * @param {ReadonlyVec2} v Scaling vector\n * @returns {mat2} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = v[1];\n  return out;\n}\n/**\n * Returns a string representation of a mat2\n *\n * @param {ReadonlyMat2} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat2(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat2\n *\n * @param {ReadonlyMat2} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3]);\n}\n/**\n * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix\n * @param {ReadonlyMat2} L the lower triangular matrix\n * @param {ReadonlyMat2} D the diagonal matrix\n * @param {ReadonlyMat2} U the upper triangular matrix\n * @param {ReadonlyMat2} a the input matrix to factorize\n */\n\nexport function LDU(L, D, U, a) {\n  L[2] = a[2] / a[0];\n  U[0] = a[0];\n  U[1] = a[1];\n  U[3] = a[3] - L[2] * U[1];\n  return [L, D, U];\n}\n/**\n * Adds two mat2's\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the first operand\n * @param {ReadonlyMat2} b the second operand\n * @returns {mat2} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the first operand\n * @param {ReadonlyMat2} b the second operand\n * @returns {mat2} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat2} a The first matrix.\n * @param {ReadonlyMat2} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat2} a The first matrix.\n * @param {ReadonlyMat2} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat2} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\n * Adds two mat2's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat2} out the receiving vector\n * @param {ReadonlyMat2} a the first operand\n * @param {ReadonlyMat2} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat2} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\n * Alias for {@link mat2.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat2.subtract}\n * @function\n */\n\nexport var sub = subtract;", "import * as glMatrix from \"./common.js\";\n/**\n * 2x3 Matrix\n * @module mat2d\n * @description\n * A mat2d contains six elements defined as:\n * <pre>\n * [a, b,\n *  c, d,\n *  tx, ty]\n * </pre>\n * This is a short form for the 3x3 matrix:\n * <pre>\n * [a, b, 0,\n *  c, d, 0,\n *  tx, ty, 1]\n * </pre>\n * The last column is ignored so the array is shorter and operations are faster.\n */\n\n/**\n * Creates a new identity mat2d\n *\n * @returns {mat2d} a new 2x3 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(6);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[4] = 0;\n    out[5] = 0;\n  }\n\n  out[0] = 1;\n  out[3] = 1;\n  return out;\n}\n/**\n * Creates a new mat2d initialized with values from an existing matrix\n *\n * @param {ReadonlyMat2d} a matrix to clone\n * @returns {mat2d} a new 2x3 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(6);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  return out;\n}\n/**\n * Copy the values from one mat2d to another\n *\n * @param {mat2d} out the receiving matrix\n * @param {ReadonlyMat2d} a the source matrix\n * @returns {mat2d} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  return out;\n}\n/**\n * Set a mat2d to the identity matrix\n *\n * @param {mat2d} out the receiving matrix\n * @returns {mat2d} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n/**\n * Create a new mat2d with the given values\n *\n * @param {Number} a Component A (index 0)\n * @param {Number} b Component B (index 1)\n * @param {Number} c Component C (index 2)\n * @param {Number} d Component D (index 3)\n * @param {Number} tx Component TX (index 4)\n * @param {Number} ty Component TY (index 5)\n * @returns {mat2d} A new mat2d\n */\n\nexport function fromValues(a, b, c, d, tx, ty) {\n  var out = new glMatrix.ARRAY_TYPE(6);\n  out[0] = a;\n  out[1] = b;\n  out[2] = c;\n  out[3] = d;\n  out[4] = tx;\n  out[5] = ty;\n  return out;\n}\n/**\n * Set the components of a mat2d to the given values\n *\n * @param {mat2d} out the receiving matrix\n * @param {Number} a Component A (index 0)\n * @param {Number} b Component B (index 1)\n * @param {Number} c Component C (index 2)\n * @param {Number} d Component D (index 3)\n * @param {Number} tx Component TX (index 4)\n * @param {Number} ty Component TY (index 5)\n * @returns {mat2d} out\n */\n\nexport function set(out, a, b, c, d, tx, ty) {\n  out[0] = a;\n  out[1] = b;\n  out[2] = c;\n  out[3] = d;\n  out[4] = tx;\n  out[5] = ty;\n  return out;\n}\n/**\n * Inverts a mat2d\n *\n * @param {mat2d} out the receiving matrix\n * @param {ReadonlyMat2d} a the source matrix\n * @returns {mat2d} out\n */\n\nexport function invert(out, a) {\n  var aa = a[0],\n      ab = a[1],\n      ac = a[2],\n      ad = a[3];\n  var atx = a[4],\n      aty = a[5];\n  var det = aa * ad - ab * ac;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = ad * det;\n  out[1] = -ab * det;\n  out[2] = -ac * det;\n  out[3] = aa * det;\n  out[4] = (ac * aty - ad * atx) * det;\n  out[5] = (ab * atx - aa * aty) * det;\n  return out;\n}\n/**\n * Calculates the determinant of a mat2d\n *\n * @param {ReadonlyMat2d} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  return a[0] * a[3] - a[1] * a[2];\n}\n/**\n * Multiplies two mat2d's\n *\n * @param {mat2d} out the receiving matrix\n * @param {ReadonlyMat2d} a the first operand\n * @param {ReadonlyMat2d} b the second operand\n * @returns {mat2d} out\n */\n\nexport function multiply(out, a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5];\n  out[0] = a0 * b0 + a2 * b1;\n  out[1] = a1 * b0 + a3 * b1;\n  out[2] = a0 * b2 + a2 * b3;\n  out[3] = a1 * b2 + a3 * b3;\n  out[4] = a0 * b4 + a2 * b5 + a4;\n  out[5] = a1 * b4 + a3 * b5 + a5;\n  return out;\n}\n/**\n * Rotates a mat2d by the given angle\n *\n * @param {mat2d} out the receiving matrix\n * @param {ReadonlyMat2d} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2d} out\n */\n\nexport function rotate(out, a, rad) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = a0 * c + a2 * s;\n  out[1] = a1 * c + a3 * s;\n  out[2] = a0 * -s + a2 * c;\n  out[3] = a1 * -s + a3 * c;\n  out[4] = a4;\n  out[5] = a5;\n  return out;\n}\n/**\n * Scales the mat2d by the dimensions in the given vec2\n *\n * @param {mat2d} out the receiving matrix\n * @param {ReadonlyMat2d} a the matrix to translate\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\n * @returns {mat2d} out\n **/\n\nexport function scale(out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var v0 = v[0],\n      v1 = v[1];\n  out[0] = a0 * v0;\n  out[1] = a1 * v0;\n  out[2] = a2 * v1;\n  out[3] = a3 * v1;\n  out[4] = a4;\n  out[5] = a5;\n  return out;\n}\n/**\n * Translates the mat2d by the dimensions in the given vec2\n *\n * @param {mat2d} out the receiving matrix\n * @param {ReadonlyMat2d} a the matrix to translate\n * @param {ReadonlyVec2} v the vec2 to translate the matrix by\n * @returns {mat2d} out\n **/\n\nexport function translate(out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var v0 = v[0],\n      v1 = v[1];\n  out[0] = a0;\n  out[1] = a1;\n  out[2] = a2;\n  out[3] = a3;\n  out[4] = a0 * v0 + a2 * v1 + a4;\n  out[5] = a1 * v0 + a3 * v1 + a5;\n  return out;\n}\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.rotate(dest, dest, rad);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2d} out\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = -s;\n  out[3] = c;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.scale(dest, dest, vec);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {ReadonlyVec2} v Scaling vector\n * @returns {mat2d} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = v[1];\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.translate(dest, dest, vec);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {ReadonlyVec2} v Translation vector\n * @returns {mat2d} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = v[0];\n  out[5] = v[1];\n  return out;\n}\n/**\n * Returns a string representation of a mat2d\n *\n * @param {ReadonlyMat2d} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat2d(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat2d\n *\n * @param {ReadonlyMat2d} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], 1);\n}\n/**\n * Adds two mat2d's\n *\n * @param {mat2d} out the receiving matrix\n * @param {ReadonlyMat2d} a the first operand\n * @param {ReadonlyMat2d} b the second operand\n * @returns {mat2d} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat2d} out the receiving matrix\n * @param {ReadonlyMat2d} a the first operand\n * @param {ReadonlyMat2d} b the second operand\n * @returns {mat2d} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat2d} out the receiving matrix\n * @param {ReadonlyMat2d} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat2d} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  return out;\n}\n/**\n * Adds two mat2d's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat2d} out the receiving vector\n * @param {ReadonlyMat2d} a the first operand\n * @param {ReadonlyMat2d} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat2d} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat2d} a The first matrix.\n * @param {ReadonlyMat2d} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat2d} a The first matrix.\n * @param {ReadonlyMat2d} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5));\n}\n/**\n * Alias for {@link mat2d.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat2d.subtract}\n * @function\n */\n\nexport var sub = subtract;", "import * as glMatrix from \"./common.js\";\n/**\n * 3x3 Matrix\n * @module mat3\n */\n\n/**\n * Creates a new identity mat3\n *\n * @returns {mat3} a new 3x3 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(9);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n  }\n\n  out[0] = 1;\n  out[4] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\n * Copies the upper-left 3x3 values into the given mat3.\n *\n * @param {mat3} out the receiving 3x3 matrix\n * @param {ReadonlyMat4} a   the source 4x4 matrix\n * @returns {mat3} out\n */\n\nexport function fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n/**\n * Creates a new mat3 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat3} a matrix to clone\n * @returns {mat3} a new 3x3 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Copy the values from one mat3 to another\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Create a new mat3 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} A new mat3\n */\n\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\n * Set the components of a mat3 to the given values\n *\n * @param {mat3} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} out\n */\n\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\n * Set a mat3 to the identity matrix\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b01 = a22 * a11 - a12 * a21;\n  var b11 = -a22 * a10 + a12 * a20;\n  var b21 = a21 * a10 - a11 * a20; // Calculate the determinant\n\n  var det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  out[0] = a11 * a22 - a12 * a21;\n  out[1] = a02 * a21 - a01 * a22;\n  out[2] = a01 * a12 - a02 * a11;\n  out[3] = a12 * a20 - a10 * a22;\n  out[4] = a00 * a22 - a02 * a20;\n  out[5] = a02 * a10 - a00 * a12;\n  out[6] = a10 * a21 - a11 * a20;\n  out[7] = a01 * a20 - a00 * a21;\n  out[8] = a00 * a11 - a01 * a10;\n  return out;\n}\n/**\n * Calculates the determinant of a mat3\n *\n * @param {ReadonlyMat3} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n/**\n * Multiplies two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b00 = b[0],\n      b01 = b[1],\n      b02 = b[2];\n  var b10 = b[3],\n      b11 = b[4],\n      b12 = b[5];\n  var b20 = b[6],\n      b21 = b[7],\n      b22 = b[8];\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n/**\n * Translate a mat3 by the given vector\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to translate\n * @param {ReadonlyVec2} v vector to translate by\n * @returns {mat3} out\n */\n\nexport function translate(out, a, v) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      x = v[0],\n      y = v[1];\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n/**\n * Rotates a mat3 by the given angle\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\n\nexport function rotate(out, a, rad) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n}\n/**\n * Scales the mat3 by the dimensions in the given vec2\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to rotate\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\n * @returns {mat3} out\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1];\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.translate(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyVec2} v Translation vector\n * @returns {mat3} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.rotate(dest, dest, rad);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.scale(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyVec2} v Scaling vector\n * @returns {mat3} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Copies the values from a mat2d into a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat2d} a the matrix to copy\n * @returns {mat3} out\n **/\n\nexport function fromMat2d(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n  return out;\n}\n/**\n * Calculates a 3x3 matrix from the given quaternion\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat3} out\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n  return out;\n}\n/**\n * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyMat4} a Mat4 to derive the normal matrix from\n *\n * @returns {mat3} out\n */\n\nexport function normalFromMat4(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  return out;\n}\n/**\n * Generates a 2D projection matrix with the given bounds\n *\n * @param {mat3} out mat3 frustum matrix will be written into\n * @param {number} width Width of your gl context\n * @param {number} height Height of gl context\n * @returns {mat3} out\n */\n\nexport function projection(out, width, height) {\n  out[0] = 2 / width;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -2 / height;\n  out[5] = 0;\n  out[6] = -1;\n  out[7] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat3\n *\n * @param {ReadonlyMat3} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat3\n *\n * @param {ReadonlyMat3} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8]);\n}\n/**\n * Adds two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat3} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n/**\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat3} out the receiving vector\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat3} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat3} a The first matrix.\n * @param {ReadonlyMat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat3} a The first matrix.\n * @param {ReadonlyMat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7],\n      a8 = a[8];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7],\n      b8 = b[8];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));\n}\n/**\n * Alias for {@link mat3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat3.subtract}\n * @function\n */\n\nexport var sub = subtract;", "import * as glMatrix from \"./common.js\";\n/**\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\n * @module mat4\n */\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\n * Calculates the determinant of a mat4\n *\n * @param {ReadonlyMat4} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to translate\n * @param {ReadonlyVec3} v vector to translate by\n * @returns {mat4} out\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 from a dual quat.\n *\n * @param {mat4} out Matrix\n * @param {ReadonlyQuat2} a Dual Quaternion\n * @returns {mat4} mat4 receiving operation result\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.hypot(m11, m12, m13);\n  out[1] = Math.hypot(m21, m22, m23);\n  out[2] = Math.hypot(m31, m32, m33);\n  return out;\n}\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\n\nexport function getRotation(out, mat) {\n  var scaling = new glMatrix.ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n  var is1 = 1 / scaling[0];\n  var is2 = 1 / scaling[1];\n  var is3 = 1 / scaling[2];\n  var sm11 = mat[0] * is1;\n  var sm12 = mat[1] * is2;\n  var sm13 = mat[2] * is3;\n  var sm21 = mat[4] * is1;\n  var sm22 = mat[5] * is2;\n  var sm23 = mat[6] * is3;\n  var sm31 = mat[8] * is1;\n  var sm32 = mat[9] * is2;\n  var sm33 = mat[10] * is3;\n  var trace = sm11 + sm22 + sm33;\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveNO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\n * Alias for {@link mat4.perspectiveNO}\n * @function\n */\n\nexport var perspective = perspectiveNO;\n/**\n * Generates a perspective projection matrix suitable for WebGPU with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveZO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = far * nf;\n    out[14] = far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -near;\n  }\n\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoNO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Alias for {@link mat4.orthoNO}\n * @function\n */\n\nexport var ortho = orthoNO;\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoZO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = near * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.hypot(z0, z1, z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.hypot(x0, x1, x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.hypot(y0, y1, y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat4\n *\n * @param {ReadonlyMat4} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \", \" + a[9] + \", \" + a[10] + \", \" + a[11] + \", \" + a[12] + \", \" + a[13] + \", \" + a[14] + \", \" + a[15] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\n}\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\n\nexport var sub = subtract;", "import * as glMatrix from \"./common.js\";\nimport * as mat3 from \"./mat3.js\";\nimport * as vec3 from \"./vec3.js\";\nimport * as vec4 from \"./vec4.js\";\n/**\n * Quaternion\n * @module quat\n */\n\n/**\n * Creates a new identity quat\n *\n * @returns {quat} a new quaternion\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[3] = 1;\n  return out;\n}\n/**\n * Set a quat to the identity quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\n\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\n * Sets a quat from the given angle and rotation axis,\n * then returns it.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyVec3} axis the axis around which to rotate\n * @param {Number} rad the angle in radians\n * @returns {quat} out\n **/\n\nexport function setAxisAngle(out, axis, rad) {\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  out[0] = s * axis[0];\n  out[1] = s * axis[1];\n  out[2] = s * axis[2];\n  out[3] = Math.cos(rad);\n  return out;\n}\n/**\n * Gets the rotation axis and angle for a given\n *  quaternion. If a quaternion is created with\n *  setAxisAngle, this method will return the same\n *  values as providied in the original parameter list\n *  OR functionally equivalent values.\n * Example: The quaternion formed by axis [0, 0, 1] and\n *  angle -90 is the same as the quaternion formed by\n *  [0, 0, 1] and 270. This method favors the latter.\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\n * @param  {ReadonlyQuat} q     Quaternion to be decomposed\n * @return {Number}     Angle, in radians, of the rotation\n */\n\nexport function getAxisAngle(out_axis, q) {\n  var rad = Math.acos(q[3]) * 2.0;\n  var s = Math.sin(rad / 2.0);\n\n  if (s > glMatrix.EPSILON) {\n    out_axis[0] = q[0] / s;\n    out_axis[1] = q[1] / s;\n    out_axis[2] = q[2] / s;\n  } else {\n    // If s is zero, return any axis (no rotation - axis does not matter)\n    out_axis[0] = 1;\n    out_axis[1] = 0;\n    out_axis[2] = 0;\n  }\n\n  return rad;\n}\n/**\n * Gets the angular distance between two unit quaternions\n *\n * @param  {ReadonlyQuat} a     Origin unit quaternion\n * @param  {ReadonlyQuat} b     Destination unit quaternion\n * @return {Number}     Angle, in radians, between the two quaternions\n */\n\nexport function getAngle(a, b) {\n  var dotproduct = dot(a, b);\n  return Math.acos(2 * dotproduct * dotproduct - 1);\n}\n/**\n * Multiplies two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {quat} out\n */\n\nexport function multiply(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\n * Rotates a quaternion by the given angle about the X axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\n\nexport function rotateX(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + aw * bx;\n  out[1] = ay * bw + az * bx;\n  out[2] = az * bw - ay * bx;\n  out[3] = aw * bw - ax * bx;\n  return out;\n}\n/**\n * Rotates a quaternion by the given angle about the Y axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\n\nexport function rotateY(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var by = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw - az * by;\n  out[1] = ay * bw + aw * by;\n  out[2] = az * bw + ax * by;\n  out[3] = aw * bw - ay * by;\n  return out;\n}\n/**\n * Rotates a quaternion by the given angle about the Z axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\n\nexport function rotateZ(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bz = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + ay * bz;\n  out[1] = ay * bw - ax * bz;\n  out[2] = az * bw + aw * bz;\n  out[3] = aw * bw - az * bz;\n  return out;\n}\n/**\n * Calculates the W component of a quat from the X, Y, and Z components.\n * Assumes that quaternion is 1 unit in length.\n * Any existing W component will be ignored.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate W component of\n * @returns {quat} out\n */\n\nexport function calculateW(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n  return out;\n}\n/**\n * Calculate the exponential of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @returns {quat} out\n */\n\nexport function exp(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  var r = Math.sqrt(x * x + y * y + z * z);\n  var et = Math.exp(w);\n  var s = r > 0 ? et * Math.sin(r) / r : 0;\n  out[0] = x * s;\n  out[1] = y * s;\n  out[2] = z * s;\n  out[3] = et * Math.cos(r);\n  return out;\n}\n/**\n * Calculate the natural logarithm of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @returns {quat} out\n */\n\nexport function ln(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  var r = Math.sqrt(x * x + y * y + z * z);\n  var t = r > 0 ? Math.atan2(r, w) / r : 0;\n  out[0] = x * t;\n  out[1] = y * t;\n  out[2] = z * t;\n  out[3] = 0.5 * Math.log(x * x + y * y + z * z + w * w);\n  return out;\n}\n/**\n * Calculate the scalar power of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @param {Number} b amount to scale the quaternion by\n * @returns {quat} out\n */\n\nexport function pow(out, a, b) {\n  ln(out, a);\n  scale(out, out, b);\n  exp(out, out);\n  return out;\n}\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\n\nexport function slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  var omega, cosom, sinom, scale0, scale1; // calc cosine\n\n  cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)\n\n  if (cosom < 0.0) {\n    cosom = -cosom;\n    bx = -bx;\n    by = -by;\n    bz = -bz;\n    bw = -bw;\n  } // calculate coefficients\n\n\n  if (1.0 - cosom > glMatrix.EPSILON) {\n    // standard case (slerp)\n    omega = Math.acos(cosom);\n    sinom = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  } // calculate final values\n\n\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n  return out;\n}\n/**\n * Generates a random unit quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\n\nexport function random(out) {\n  // Implementation of http://planning.cs.uiuc.edu/node198.html\n  // TODO: Calling random 3 times is probably not the fastest solution\n  var u1 = glMatrix.RANDOM();\n  var u2 = glMatrix.RANDOM();\n  var u3 = glMatrix.RANDOM();\n  var sqrt1MinusU1 = Math.sqrt(1 - u1);\n  var sqrtU1 = Math.sqrt(u1);\n  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\n  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\n  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\n  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\n  return out;\n}\n/**\n * Calculates the inverse of a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate inverse of\n * @returns {quat} out\n */\n\nexport function invert(out, a) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n  var invDot = dot ? 1.0 / dot : 0; // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n  out[0] = -a0 * invDot;\n  out[1] = -a1 * invDot;\n  out[2] = -a2 * invDot;\n  out[3] = a3 * invDot;\n  return out;\n}\n/**\n * Calculates the conjugate of a quat\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate conjugate of\n * @returns {quat} out\n */\n\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Creates a quaternion from the given 3x3 rotation matrix.\n *\n * NOTE: The resultant quaternion is not normalized, so you should be sure\n * to renormalize the quaternion yourself where necessary.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyMat3} m rotation matrix\n * @returns {quat} out\n * @function\n */\n\nexport function fromMat3(out, m) {\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  var fTrace = m[0] + m[4] + m[8];\n  var fRoot;\n\n  if (fTrace > 0.0) {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0); // 2w\n\n    out[3] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot; // 1/(4w)\n\n    out[0] = (m[5] - m[7]) * fRoot;\n    out[1] = (m[6] - m[2]) * fRoot;\n    out[2] = (m[1] - m[3]) * fRoot;\n  } else {\n    // |w| <= 1/2\n    var i = 0;\n    if (m[4] > m[0]) i = 1;\n    if (m[8] > m[i * 3 + i]) i = 2;\n    var j = (i + 1) % 3;\n    var k = (i + 2) % 3;\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n    out[i] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot;\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n  }\n\n  return out;\n}\n/**\n * Creates a quaternion from the given euler angle x, y, z.\n *\n * @param {quat} out the receiving quaternion\n * @param {x} Angle to rotate around X axis in degrees.\n * @param {y} Angle to rotate around Y axis in degrees.\n * @param {z} Angle to rotate around Z axis in degrees.\n * @returns {quat} out\n * @function\n */\n\nexport function fromEuler(out, x, y, z) {\n  var halfToRad = 0.5 * Math.PI / 180.0;\n  x *= halfToRad;\n  y *= halfToRad;\n  z *= halfToRad;\n  var sx = Math.sin(x);\n  var cx = Math.cos(x);\n  var sy = Math.sin(y);\n  var cy = Math.cos(y);\n  var sz = Math.sin(z);\n  var cz = Math.cos(z);\n  out[0] = sx * cy * cz - cx * sy * sz;\n  out[1] = cx * sy * cz + sx * cy * sz;\n  out[2] = cx * cy * sz - sx * sy * cz;\n  out[3] = cx * cy * cz + sx * sy * sz;\n  return out;\n}\n/**\n * Returns a string representation of a quatenion\n *\n * @param {ReadonlyQuat} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"quat(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\n * Creates a new quat initialized with values from an existing quaternion\n *\n * @param {ReadonlyQuat} a quaternion to clone\n * @returns {quat} a new quaternion\n * @function\n */\n\nexport var clone = vec4.clone;\n/**\n * Creates a new quat initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} a new quaternion\n * @function\n */\n\nexport var fromValues = vec4.fromValues;\n/**\n * Copy the values from one quat to another\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the source quaternion\n * @returns {quat} out\n * @function\n */\n\nexport var copy = vec4.copy;\n/**\n * Set the components of a quat to the given values\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} out\n * @function\n */\n\nexport var set = vec4.set;\n/**\n * Adds two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {quat} out\n * @function\n */\n\nexport var add = vec4.add;\n/**\n * Alias for {@link quat.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Scales a quat by a scalar number\n *\n * @param {quat} out the receiving vector\n * @param {ReadonlyQuat} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {quat} out\n * @function\n */\n\nexport var scale = vec4.scale;\n/**\n * Calculates the dot product of two quat's\n *\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\n\nexport var dot = vec4.dot;\n/**\n * Performs a linear interpolation between two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n * @function\n */\n\nexport var lerp = vec4.lerp;\n/**\n * Calculates the length of a quat\n *\n * @param {ReadonlyQuat} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport var length = vec4.length;\n/**\n * Alias for {@link quat.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Calculates the squared length of a quat\n *\n * @param {ReadonlyQuat} a vector to calculate squared length of\n * @returns {Number} squared length of a\n * @function\n */\n\nexport var squaredLength = vec4.squaredLength;\n/**\n * Alias for {@link quat.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Normalize a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quaternion to normalize\n * @returns {quat} out\n * @function\n */\n\nexport var normalize = vec4.normalize;\n/**\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyQuat} a The first quaternion.\n * @param {ReadonlyQuat} b The second quaternion.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport var exactEquals = vec4.exactEquals;\n/**\n * Returns whether or not the quaternions have approximately the same elements in the same position.\n *\n * @param {ReadonlyQuat} a The first vector.\n * @param {ReadonlyQuat} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport var equals = vec4.equals;\n/**\n * Sets a quaternion to represent the shortest rotation from one\n * vector to another.\n *\n * Both vectors are assumed to be unit length.\n *\n * @param {quat} out the receiving quaternion.\n * @param {ReadonlyVec3} a the initial vector\n * @param {ReadonlyVec3} b the destination vector\n * @returns {quat} out\n */\n\nexport var rotationTo = function () {\n  var tmpvec3 = vec3.create();\n  var xUnitVec3 = vec3.fromValues(1, 0, 0);\n  var yUnitVec3 = vec3.fromValues(0, 1, 0);\n  return function (out, a, b) {\n    var dot = vec3.dot(a, b);\n\n    if (dot < -0.999999) {\n      vec3.cross(tmpvec3, xUnitVec3, a);\n      if (vec3.len(tmpvec3) < 0.000001) vec3.cross(tmpvec3, yUnitVec3, a);\n      vec3.normalize(tmpvec3, tmpvec3);\n      setAxisAngle(out, tmpvec3, Math.PI);\n      return out;\n    } else if (dot > 0.999999) {\n      out[0] = 0;\n      out[1] = 0;\n      out[2] = 0;\n      out[3] = 1;\n      return out;\n    } else {\n      vec3.cross(tmpvec3, a, b);\n      out[0] = tmpvec3[0];\n      out[1] = tmpvec3[1];\n      out[2] = tmpvec3[2];\n      out[3] = 1 + dot;\n      return normalize(out, out);\n    }\n  };\n}();\n/**\n * Performs a spherical linear interpolation with two control points\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {ReadonlyQuat} c the third operand\n * @param {ReadonlyQuat} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\n\nexport var sqlerp = function () {\n  var temp1 = create();\n  var temp2 = create();\n  return function (out, a, b, c, d, t) {\n    slerp(temp1, a, d, t);\n    slerp(temp2, b, c, t);\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\n    return out;\n  };\n}();\n/**\n * Sets the specified quaternion with values corresponding to the given\n * axes. Each axis is a vec3 and is expected to be unit length and\n * perpendicular to all other specified axes.\n *\n * @param {ReadonlyVec3} view  the vector representing the viewing direction\n * @param {ReadonlyVec3} right the vector representing the local \"right\" direction\n * @param {ReadonlyVec3} up    the vector representing the local \"up\" direction\n * @returns {quat} out\n */\n\nexport var setAxes = function () {\n  var matr = mat3.create();\n  return function (out, view, right, up) {\n    matr[0] = right[0];\n    matr[3] = right[1];\n    matr[6] = right[2];\n    matr[1] = up[0];\n    matr[4] = up[1];\n    matr[7] = up[2];\n    matr[2] = -view[0];\n    matr[5] = -view[1];\n    matr[8] = -view[2];\n    return normalize(out, fromMat3(out, matr));\n  };\n}();", "import * as glMatrix from \"./common.js\";\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {ReadonlyVec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Calculates the length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the source vector\n * @returns {vec3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to ceil\n * @returns {vec3} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to floor\n * @returns {vec3} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to round\n * @returns {vec3} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Calculates the squared length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to negate\n * @returns {vec3} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to invert\n * @returns {vec3} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to normalize\n * @returns {vec3} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec3} out\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateX(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateY(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateZ(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Get the angle between two 3D vectors\n * @param {ReadonlyVec3} a The first operand\n * @param {ReadonlyVec3} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n      mag = mag1 * mag2,\n      cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec3 to zero\n *\n * @param {vec3} out the receiving vector\n * @returns {vec3} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec3.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();", "import * as glMatrix from \"./common.js\";\n/**\n * 4 Dimensional Vector\n * @module vec4\n */\n\n/**\n * Creates a new, empty vec4\n *\n * @returns {vec4} a new 4D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec4 initialized with values from an existing vector\n *\n * @param {ReadonlyVec4} a vector to clone\n * @returns {vec4} a new 4D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Creates a new vec4 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} a new 4D vector\n */\n\nexport function fromValues(x, y, z, w) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the source vector\n * @returns {vec4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\n\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\n * Multiplies two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n/**\n * Divides two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n/**\n * Math.ceil the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to ceil\n * @returns {vec4} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n/**\n * Math.floor the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to floor\n * @returns {vec4} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n/**\n * Returns the minimum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n/**\n * Returns the maximum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n/**\n * Math.round the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to round\n * @returns {vec4} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\n * Adds two vec4's after scaling the second operand by a scalar value\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec4} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\n * Calculates the length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\n * Negates the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to negate\n * @returns {vec4} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to invert\n * @returns {vec4} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to normalize\n * @returns {vec4} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  var len = x * x + y * y + z * z + w * w;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\n * Returns the cross-product of three vectors in a 4-dimensional space\n *\n * @param {ReadonlyVec4} result the receiving vector\n * @param {ReadonlyVec4} U the first vector\n * @param {ReadonlyVec4} V the second vector\n * @param {ReadonlyVec4} W the third vector\n * @returns {vec4} result\n */\n\nexport function cross(out, u, v, w) {\n  var A = v[0] * w[1] - v[1] * w[0],\n      B = v[0] * w[2] - v[2] * w[0],\n      C = v[0] * w[3] - v[3] * w[0],\n      D = v[1] * w[2] - v[2] * w[1],\n      E = v[1] * w[3] - v[3] * w[1],\n      F = v[2] * w[3] - v[3] * w[2];\n  var G = u[0];\n  var H = u[1];\n  var I = u[2];\n  var J = u[3];\n  out[0] = H * F - I * E + J * D;\n  out[1] = -(G * F) + I * C - J * B;\n  out[2] = G * E - H * C + J * A;\n  out[3] = -(G * D) + H * B - I * A;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec4} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  var aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec4} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec4} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n\n  var v1, v2, v3, v4;\n  var s1, s2;\n\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n/**\n * Transforms the vec4 with a mat4.\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec4} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n/**\n * Transforms the vec4 with a quat\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec4} out\n */\n\nexport function transformQuat(out, a, q) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3]; // calculate quat * vec\n\n  var ix = qw * x + qy * z - qz * y;\n  var iy = qw * y + qz * x - qx * z;\n  var iz = qw * z + qx * y - qy * x;\n  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set the components of a vec4 to zero\n *\n * @param {vec4} out the receiving vector\n * @returns {vec4} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec4} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\n * Alias for {@link vec4.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec4.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec4.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec4.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec4.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec4.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec4s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n}();", "import * as glMatrix from \"./common.js\";\nimport * as quat from \"./quat.js\";\nimport * as mat4 from \"./mat4.js\";\n/**\n * Dual Quaternion<br>\n * Format: [real, dual]<br>\n * Quaternion format: XYZW<br>\n * Make sure to have normalized dual quaternions, otherwise the functions may not work as intended.<br>\n * @module quat2\n */\n\n/**\n * Creates a new identity dual quat\n *\n * @returns {quat2} a new dual quaternion [real -> rotation, dual -> translation]\n */\n\nexport function create() {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    dq[0] = 0;\n    dq[1] = 0;\n    dq[2] = 0;\n    dq[4] = 0;\n    dq[5] = 0;\n    dq[6] = 0;\n    dq[7] = 0;\n  }\n\n  dq[3] = 1;\n  return dq;\n}\n/**\n * Creates a new quat initialized with values from an existing quaternion\n *\n * @param {ReadonlyQuat2} a dual quaternion to clone\n * @returns {quat2} new dual quaternion\n * @function\n */\n\nexport function clone(a) {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = a[0];\n  dq[1] = a[1];\n  dq[2] = a[2];\n  dq[3] = a[3];\n  dq[4] = a[4];\n  dq[5] = a[5];\n  dq[6] = a[6];\n  dq[7] = a[7];\n  return dq;\n}\n/**\n * Creates a new dual quat initialized with the given values\n *\n * @param {Number} x1 X component\n * @param {Number} y1 Y component\n * @param {Number} z1 Z component\n * @param {Number} w1 W component\n * @param {Number} x2 X component\n * @param {Number} y2 Y component\n * @param {Number} z2 Z component\n * @param {Number} w2 W component\n * @returns {quat2} new dual quaternion\n * @function\n */\n\nexport function fromValues(x1, y1, z1, w1, x2, y2, z2, w2) {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = x1;\n  dq[1] = y1;\n  dq[2] = z1;\n  dq[3] = w1;\n  dq[4] = x2;\n  dq[5] = y2;\n  dq[6] = z2;\n  dq[7] = w2;\n  return dq;\n}\n/**\n * Creates a new dual quat from the given values (quat and translation)\n *\n * @param {Number} x1 X component\n * @param {Number} y1 Y component\n * @param {Number} z1 Z component\n * @param {Number} w1 W component\n * @param {Number} x2 X component (translation)\n * @param {Number} y2 Y component (translation)\n * @param {Number} z2 Z component (translation)\n * @returns {quat2} new dual quaternion\n * @function\n */\n\nexport function fromRotationTranslationValues(x1, y1, z1, w1, x2, y2, z2) {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = x1;\n  dq[1] = y1;\n  dq[2] = z1;\n  dq[3] = w1;\n  var ax = x2 * 0.5,\n      ay = y2 * 0.5,\n      az = z2 * 0.5;\n  dq[4] = ax * w1 + ay * z1 - az * y1;\n  dq[5] = ay * w1 + az * x1 - ax * z1;\n  dq[6] = az * w1 + ax * y1 - ay * x1;\n  dq[7] = -ax * x1 - ay * y1 - az * z1;\n  return dq;\n}\n/**\n * Creates a dual quat from a quaternion and a translation\n *\n * @param {ReadonlyQuat2} dual quaternion receiving operation result\n * @param {ReadonlyQuat} q a normalized quaternion\n * @param {ReadonlyVec3} t tranlation vector\n * @returns {quat2} dual quaternion receiving operation result\n * @function\n */\n\nexport function fromRotationTranslation(out, q, t) {\n  var ax = t[0] * 0.5,\n      ay = t[1] * 0.5,\n      az = t[2] * 0.5,\n      bx = q[0],\n      by = q[1],\n      bz = q[2],\n      bw = q[3];\n  out[0] = bx;\n  out[1] = by;\n  out[2] = bz;\n  out[3] = bw;\n  out[4] = ax * bw + ay * bz - az * by;\n  out[5] = ay * bw + az * bx - ax * bz;\n  out[6] = az * bw + ax * by - ay * bx;\n  out[7] = -ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\n * Creates a dual quat from a translation\n *\n * @param {ReadonlyQuat2} dual quaternion receiving operation result\n * @param {ReadonlyVec3} t translation vector\n * @returns {quat2} dual quaternion receiving operation result\n * @function\n */\n\nexport function fromTranslation(out, t) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = t[0] * 0.5;\n  out[5] = t[1] * 0.5;\n  out[6] = t[2] * 0.5;\n  out[7] = 0;\n  return out;\n}\n/**\n * Creates a dual quat from a quaternion\n *\n * @param {ReadonlyQuat2} dual quaternion receiving operation result\n * @param {ReadonlyQuat} q the quaternion\n * @returns {quat2} dual quaternion receiving operation result\n * @function\n */\n\nexport function fromRotation(out, q) {\n  out[0] = q[0];\n  out[1] = q[1];\n  out[2] = q[2];\n  out[3] = q[3];\n  out[4] = 0;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  return out;\n}\n/**\n * Creates a new dual quat from a matrix (4x4)\n *\n * @param {quat2} out the dual quaternion\n * @param {ReadonlyMat4} a the matrix\n * @returns {quat2} dual quat receiving operation result\n * @function\n */\n\nexport function fromMat4(out, a) {\n  //TODO Optimize this\n  var outer = quat.create();\n  mat4.getRotation(outer, a);\n  var t = new glMatrix.ARRAY_TYPE(3);\n  mat4.getTranslation(t, a);\n  fromRotationTranslation(out, outer, t);\n  return out;\n}\n/**\n * Copy the values from one dual quat to another\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the source dual quaternion\n * @returns {quat2} out\n * @function\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  return out;\n}\n/**\n * Set a dual quat to the identity dual quaternion\n *\n * @param {quat2} out the receiving quaternion\n * @returns {quat2} out\n */\n\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  return out;\n}\n/**\n * Set the components of a dual quat to the given values\n *\n * @param {quat2} out the receiving quaternion\n * @param {Number} x1 X component\n * @param {Number} y1 Y component\n * @param {Number} z1 Z component\n * @param {Number} w1 W component\n * @param {Number} x2 X component\n * @param {Number} y2 Y component\n * @param {Number} z2 Z component\n * @param {Number} w2 W component\n * @returns {quat2} out\n * @function\n */\n\nexport function set(out, x1, y1, z1, w1, x2, y2, z2, w2) {\n  out[0] = x1;\n  out[1] = y1;\n  out[2] = z1;\n  out[3] = w1;\n  out[4] = x2;\n  out[5] = y2;\n  out[6] = z2;\n  out[7] = w2;\n  return out;\n}\n/**\n * Gets the real part of a dual quat\n * @param  {quat} out real part\n * @param  {ReadonlyQuat2} a Dual Quaternion\n * @return {quat} real part\n */\n\nexport var getReal = quat.copy;\n/**\n * Gets the dual part of a dual quat\n * @param  {quat} out dual part\n * @param  {ReadonlyQuat2} a Dual Quaternion\n * @return {quat} dual part\n */\n\nexport function getDual(out, a) {\n  out[0] = a[4];\n  out[1] = a[5];\n  out[2] = a[6];\n  out[3] = a[7];\n  return out;\n}\n/**\n * Set the real component of a dual quat to the given quaternion\n *\n * @param {quat2} out the receiving quaternion\n * @param {ReadonlyQuat} q a quaternion representing the real part\n * @returns {quat2} out\n * @function\n */\n\nexport var setReal = quat.copy;\n/**\n * Set the dual component of a dual quat to the given quaternion\n *\n * @param {quat2} out the receiving quaternion\n * @param {ReadonlyQuat} q a quaternion representing the dual part\n * @returns {quat2} out\n * @function\n */\n\nexport function setDual(out, q) {\n  out[4] = q[0];\n  out[5] = q[1];\n  out[6] = q[2];\n  out[7] = q[3];\n  return out;\n}\n/**\n * Gets the translation of a normalized dual quat\n * @param  {vec3} out translation\n * @param  {ReadonlyQuat2} a Dual Quaternion to be decomposed\n * @return {vec3} translation\n */\n\nexport function getTranslation(out, a) {\n  var ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3];\n  out[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n  out[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n  out[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  return out;\n}\n/**\n * Translates a dual quat by the given vector\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the dual quaternion to translate\n * @param {ReadonlyVec3} v vector to translate by\n * @returns {quat2} out\n */\n\nexport function translate(out, a, v) {\n  var ax1 = a[0],\n      ay1 = a[1],\n      az1 = a[2],\n      aw1 = a[3],\n      bx1 = v[0] * 0.5,\n      by1 = v[1] * 0.5,\n      bz1 = v[2] * 0.5,\n      ax2 = a[4],\n      ay2 = a[5],\n      az2 = a[6],\n      aw2 = a[7];\n  out[0] = ax1;\n  out[1] = ay1;\n  out[2] = az1;\n  out[3] = aw1;\n  out[4] = aw1 * bx1 + ay1 * bz1 - az1 * by1 + ax2;\n  out[5] = aw1 * by1 + az1 * bx1 - ax1 * bz1 + ay2;\n  out[6] = aw1 * bz1 + ax1 * by1 - ay1 * bx1 + az2;\n  out[7] = -ax1 * bx1 - ay1 * by1 - az1 * bz1 + aw2;\n  return out;\n}\n/**\n * Rotates a dual quat around the X axis\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\n * @param {number} rad how far should the rotation be\n * @returns {quat2} out\n */\n\nexport function rotateX(out, a, rad) {\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateX(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\n * Rotates a dual quat around the Y axis\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\n * @param {number} rad how far should the rotation be\n * @returns {quat2} out\n */\n\nexport function rotateY(out, a, rad) {\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateY(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\n * Rotates a dual quat around the Z axis\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\n * @param {number} rad how far should the rotation be\n * @returns {quat2} out\n */\n\nexport function rotateZ(out, a, rad) {\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateZ(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\n * Rotates a dual quat by a given quaternion (a * q)\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\n * @param {ReadonlyQuat} q quaternion to rotate by\n * @returns {quat2} out\n */\n\nexport function rotateByQuatAppend(out, a, q) {\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3],\n      ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  out[0] = ax * qw + aw * qx + ay * qz - az * qy;\n  out[1] = ay * qw + aw * qy + az * qx - ax * qz;\n  out[2] = az * qw + aw * qz + ax * qy - ay * qx;\n  out[3] = aw * qw - ax * qx - ay * qy - az * qz;\n  ax = a[4];\n  ay = a[5];\n  az = a[6];\n  aw = a[7];\n  out[4] = ax * qw + aw * qx + ay * qz - az * qy;\n  out[5] = ay * qw + aw * qy + az * qx - ax * qz;\n  out[6] = az * qw + aw * qz + ax * qy - ay * qx;\n  out[7] = aw * qw - ax * qx - ay * qy - az * qz;\n  return out;\n}\n/**\n * Rotates a dual quat by a given quaternion (q * a)\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat} q quaternion to rotate by\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\n * @returns {quat2} out\n */\n\nexport function rotateByQuatPrepend(out, q, a) {\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3],\n      bx = a[0],\n      by = a[1],\n      bz = a[2],\n      bw = a[3];\n  out[0] = qx * bw + qw * bx + qy * bz - qz * by;\n  out[1] = qy * bw + qw * by + qz * bx - qx * bz;\n  out[2] = qz * bw + qw * bz + qx * by - qy * bx;\n  out[3] = qw * bw - qx * bx - qy * by - qz * bz;\n  bx = a[4];\n  by = a[5];\n  bz = a[6];\n  bw = a[7];\n  out[4] = qx * bw + qw * bx + qy * bz - qz * by;\n  out[5] = qy * bw + qw * by + qz * bx - qx * bz;\n  out[6] = qz * bw + qw * bz + qx * by - qy * bx;\n  out[7] = qw * bw - qx * bx - qy * by - qz * bz;\n  return out;\n}\n/**\n * Rotates a dual quat around a given axis. Does the normalisation automatically\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @param {Number} rad how far the rotation should be\n * @returns {quat2} out\n */\n\nexport function rotateAroundAxis(out, a, axis, rad) {\n  //Special case for rad = 0\n  if (Math.abs(rad) < glMatrix.EPSILON) {\n    return copy(out, a);\n  }\n\n  var axisLength = Math.hypot(axis[0], axis[1], axis[2]);\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  var bx = s * axis[0] / axisLength;\n  var by = s * axis[1] / axisLength;\n  var bz = s * axis[2] / axisLength;\n  var bw = Math.cos(rad);\n  var ax1 = a[0],\n      ay1 = a[1],\n      az1 = a[2],\n      aw1 = a[3];\n  out[0] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[1] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[2] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[3] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  var ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  out[4] = ax * bw + aw * bx + ay * bz - az * by;\n  out[5] = ay * bw + aw * by + az * bx - ax * bz;\n  out[6] = az * bw + aw * bz + ax * by - ay * bx;\n  out[7] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\n * Adds two dual quat's\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the first operand\n * @param {ReadonlyQuat2} b the second operand\n * @returns {quat2} out\n * @function\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  return out;\n}\n/**\n * Multiplies two dual quat's\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the first operand\n * @param {ReadonlyQuat2} b the second operand\n * @returns {quat2} out\n */\n\nexport function multiply(out, a, b) {\n  var ax0 = a[0],\n      ay0 = a[1],\n      az0 = a[2],\n      aw0 = a[3],\n      bx1 = b[4],\n      by1 = b[5],\n      bz1 = b[6],\n      bw1 = b[7],\n      ax1 = a[4],\n      ay1 = a[5],\n      az1 = a[6],\n      aw1 = a[7],\n      bx0 = b[0],\n      by0 = b[1],\n      bz0 = b[2],\n      bw0 = b[3];\n  out[0] = ax0 * bw0 + aw0 * bx0 + ay0 * bz0 - az0 * by0;\n  out[1] = ay0 * bw0 + aw0 * by0 + az0 * bx0 - ax0 * bz0;\n  out[2] = az0 * bw0 + aw0 * bz0 + ax0 * by0 - ay0 * bx0;\n  out[3] = aw0 * bw0 - ax0 * bx0 - ay0 * by0 - az0 * bz0;\n  out[4] = ax0 * bw1 + aw0 * bx1 + ay0 * bz1 - az0 * by1 + ax1 * bw0 + aw1 * bx0 + ay1 * bz0 - az1 * by0;\n  out[5] = ay0 * bw1 + aw0 * by1 + az0 * bx1 - ax0 * bz1 + ay1 * bw0 + aw1 * by0 + az1 * bx0 - ax1 * bz0;\n  out[6] = az0 * bw1 + aw0 * bz1 + ax0 * by1 - ay0 * bx1 + az1 * bw0 + aw1 * bz0 + ax1 * by0 - ay1 * bx0;\n  out[7] = aw0 * bw1 - ax0 * bx1 - ay0 * by1 - az0 * bz1 + aw1 * bw0 - ax1 * bx0 - ay1 * by0 - az1 * bz0;\n  return out;\n}\n/**\n * Alias for {@link quat2.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Scales a dual quat by a scalar number\n *\n * @param {quat2} out the receiving dual quat\n * @param {ReadonlyQuat2} a the dual quat to scale\n * @param {Number} b amount to scale the dual quat by\n * @returns {quat2} out\n * @function\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  return out;\n}\n/**\n * Calculates the dot product of two dual quat's (The dot product of the real parts)\n *\n * @param {ReadonlyQuat2} a the first operand\n * @param {ReadonlyQuat2} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\n\nexport var dot = quat.dot;\n/**\n * Performs a linear interpolation between two dual quats's\n * NOTE: The resulting dual quaternions won't always be normalized (The error is most noticeable when t = 0.5)\n *\n * @param {quat2} out the receiving dual quat\n * @param {ReadonlyQuat2} a the first operand\n * @param {ReadonlyQuat2} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat2} out\n */\n\nexport function lerp(out, a, b, t) {\n  var mt = 1 - t;\n  if (dot(a, b) < 0) t = -t;\n  out[0] = a[0] * mt + b[0] * t;\n  out[1] = a[1] * mt + b[1] * t;\n  out[2] = a[2] * mt + b[2] * t;\n  out[3] = a[3] * mt + b[3] * t;\n  out[4] = a[4] * mt + b[4] * t;\n  out[5] = a[5] * mt + b[5] * t;\n  out[6] = a[6] * mt + b[6] * t;\n  out[7] = a[7] * mt + b[7] * t;\n  return out;\n}\n/**\n * Calculates the inverse of a dual quat. If they are normalized, conjugate is cheaper\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a dual quat to calculate inverse of\n * @returns {quat2} out\n */\n\nexport function invert(out, a) {\n  var sqlen = squaredLength(a);\n  out[0] = -a[0] / sqlen;\n  out[1] = -a[1] / sqlen;\n  out[2] = -a[2] / sqlen;\n  out[3] = a[3] / sqlen;\n  out[4] = -a[4] / sqlen;\n  out[5] = -a[5] / sqlen;\n  out[6] = -a[6] / sqlen;\n  out[7] = a[7] / sqlen;\n  return out;\n}\n/**\n * Calculates the conjugate of a dual quat\n * If the dual quaternion is normalized, this function is faster than quat2.inverse and produces the same result.\n *\n * @param {quat2} out the receiving quaternion\n * @param {ReadonlyQuat2} a quat to calculate conjugate of\n * @returns {quat2} out\n */\n\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  out[4] = -a[4];\n  out[5] = -a[5];\n  out[6] = -a[6];\n  out[7] = a[7];\n  return out;\n}\n/**\n * Calculates the length of a dual quat\n *\n * @param {ReadonlyQuat2} a dual quat to calculate length of\n * @returns {Number} length of a\n * @function\n */\n\nexport var length = quat.length;\n/**\n * Alias for {@link quat2.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Calculates the squared length of a dual quat\n *\n * @param {ReadonlyQuat2} a dual quat to calculate squared length of\n * @returns {Number} squared length of a\n * @function\n */\n\nexport var squaredLength = quat.squaredLength;\n/**\n * Alias for {@link quat2.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Normalize a dual quat\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a dual quaternion to normalize\n * @returns {quat2} out\n * @function\n */\n\nexport function normalize(out, a) {\n  var magnitude = squaredLength(a);\n\n  if (magnitude > 0) {\n    magnitude = Math.sqrt(magnitude);\n    var a0 = a[0] / magnitude;\n    var a1 = a[1] / magnitude;\n    var a2 = a[2] / magnitude;\n    var a3 = a[3] / magnitude;\n    var b0 = a[4];\n    var b1 = a[5];\n    var b2 = a[6];\n    var b3 = a[7];\n    var a_dot_b = a0 * b0 + a1 * b1 + a2 * b2 + a3 * b3;\n    out[0] = a0;\n    out[1] = a1;\n    out[2] = a2;\n    out[3] = a3;\n    out[4] = (b0 - a0 * a_dot_b) / magnitude;\n    out[5] = (b1 - a1 * a_dot_b) / magnitude;\n    out[6] = (b2 - a2 * a_dot_b) / magnitude;\n    out[7] = (b3 - a3 * a_dot_b) / magnitude;\n  }\n\n  return out;\n}\n/**\n * Returns a string representation of a dual quatenion\n *\n * @param {ReadonlyQuat2} a dual quaternion to represent as a string\n * @returns {String} string representation of the dual quat\n */\n\nexport function str(a) {\n  return \"quat2(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \")\";\n}\n/**\n * Returns whether or not the dual quaternions have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyQuat2} a the first dual quaternion.\n * @param {ReadonlyQuat2} b the second dual quaternion.\n * @returns {Boolean} true if the dual quaternions are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7];\n}\n/**\n * Returns whether or not the dual quaternions have approximately the same elements in the same position.\n *\n * @param {ReadonlyQuat2} a the first dual quat.\n * @param {ReadonlyQuat2} b the second dual quat.\n * @returns {Boolean} true if the dual quats are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7));\n}", "import * as glMatrix from \"./common.js\";\n/**\n * 2 Dimensional Vector\n * @module vec2\n */\n\n/**\n * Creates a new, empty vec2\n *\n * @returns {vec2} a new 2D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(2);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec2 initialized with values from an existing vector\n *\n * @param {ReadonlyVec2} a vector to clone\n * @returns {vec2} a new 2D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\n * Creates a new vec2 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} a new 2D vector\n */\n\nexport function fromValues(x, y) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\n * Copy the values from one vec2 to another\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the source vector\n * @returns {vec2} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\n * Set the components of a vec2 to the given values\n *\n * @param {vec2} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} out\n */\n\nexport function set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\n * Adds two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n/**\n * Multiplies two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n/**\n * Divides two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n/**\n * Math.ceil the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to ceil\n * @returns {vec2} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  return out;\n}\n/**\n * Math.floor the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to floor\n * @returns {vec2} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  return out;\n}\n/**\n * Returns the minimum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  return out;\n}\n/**\n * Returns the maximum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  return out;\n}\n/**\n * Math.round the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to round\n * @returns {vec2} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  return out;\n}\n/**\n * Scales a vec2 by a scalar number\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec2} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n}\n/**\n * Adds two vec2's after scaling the second operand by a scalar value\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec2} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return Math.hypot(x, y);\n}\n/**\n * Calculates the squared euclidian distance between two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return x * x + y * y;\n}\n/**\n * Calculates the length of a vec2\n *\n * @param {ReadonlyVec2} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0],\n      y = a[1];\n  return Math.hypot(x, y);\n}\n/**\n * Calculates the squared length of a vec2\n *\n * @param {ReadonlyVec2} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0],\n      y = a[1];\n  return x * x + y * y;\n}\n/**\n * Negates the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to negate\n * @returns {vec2} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to invert\n * @returns {vec2} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n}\n/**\n * Normalize a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to normalize\n * @returns {vec2} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0],\n      y = a[1];\n  var len = x * x + y * y;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n/**\n * Computes the cross product of two vec2's\n * Note that the cross product must by definition produce a 3D vector\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec2} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0],\n      ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec2} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec2} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n  return out;\n}\n/**\n * Transforms the vec2 with a mat2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat2} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat2(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n}\n/**\n * Transforms the vec2 with a mat2d\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat2d} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat2d(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n/**\n * Transforms the vec2 with a mat3\n * 3rd vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat3} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n/**\n * Transforms the vec2 with a mat4\n * 3rd vector component is implicitly '0'\n * 4th vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n/**\n * Rotate a 2D vector\n * @param {vec2} out The receiving vec2\n * @param {ReadonlyVec2} a The vec2 point to rotate\n * @param {ReadonlyVec2} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec2} out\n */\n\nexport function rotate(out, a, b, rad) {\n  //Translate point to the origin\n  var p0 = a[0] - b[0],\n      p1 = a[1] - b[1],\n      sinC = Math.sin(rad),\n      cosC = Math.cos(rad); //perform rotation and translate to correct position\n\n  out[0] = p0 * cosC - p1 * sinC + b[0];\n  out[1] = p0 * sinC + p1 * cosC + b[1];\n  return out;\n}\n/**\n * Get the angle between two 2D vectors\n * @param {ReadonlyVec2} a The first operand\n * @param {ReadonlyVec2} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var x1 = a[0],\n      y1 = a[1],\n      x2 = b[0],\n      y2 = b[1],\n      // mag is the product of the magnitudes of a and b\n  mag = Math.sqrt(x1 * x1 + y1 * y1) * Math.sqrt(x2 * x2 + y2 * y2),\n      // mag &&.. short circuits if mag == 0\n  cosine = mag && (x1 * x2 + y1 * y2) / mag; // Math.min(Math.max(cosine, -1), 1) clamps the cosine between -1 and 1\n\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec2 to zero\n *\n * @param {vec2} out the receiving vector\n * @returns {vec2} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec2} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec2(\" + a[0] + \", \" + a[1] + \")\";\n}\n/**\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec2} a The first vector.\n * @param {ReadonlyVec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec2} a The first vector.\n * @param {ReadonlyVec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1];\n  var b0 = b[0],\n      b1 = b[1];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1));\n}\n/**\n * Alias for {@link vec2.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec2.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec2.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec2.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec2.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec2.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec2.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec2s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 2;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n    }\n\n    return a;\n  };\n}();", "import { glMatrix, mat4, vec3 } from \"gl-matrix\";\r\n\r\nclass Camera {\r\n\r\n    /**\r\n     * \r\n     * @type {vec3}\r\n     */\r\n    position = vec3.fromValues(0, 0, -1);\r\n\r\n    /**\r\n     * \r\n     * @type {vec3}\r\n     */\r\n    direction = vec3.fromValues(0, 0, -1);\r\n\r\n    /**\r\n     * \r\n     * @type {vec3}\r\n     */\r\n    up = vec3.fromValues(0, 1, 0);\r\n\r\n    /**\r\n     * \r\n     * @type {mat4}\r\n     */\r\n    projectionMatrix = mat4.create();\r\n\r\n    /**\r\n     * \r\n     * @type {mat4}\r\n     */\r\n    viewMatrix = mat4.create();\r\n\r\n    /**\r\n     * \r\n     * @type {mat4}\r\n     */\r\n    cameraMatrix = mat4.create();\r\n\r\n    /**\r\n     * \r\n     * @type {number}\r\n     */\r\n    viewportWidth = 0;\r\n\r\n    /**\r\n     * \r\n     * @type {number}\r\n     */\r\n    viewportHeight = 0;\r\n\r\n    /**\r\n     * \r\n     * @type {number}\r\n     */\r\n    near = 1;\r\n\r\n    /**\r\n     * \r\n     * @type {number}\r\n     */\r\n    far = 100;\r\n\r\n    /**\r\n     * \r\n     * @type {vec3}\r\n     */\r\n    tpmVec = vec3.create();\r\n\r\n    constructor() {}\r\n\r\n    lookAt(...args) {\r\n        if(args.length == 1) {\r\n\r\n            vec3.copy(this.tpmVec, args[0]);\r\n\r\n        } else if(args.length == 3) {\r\n\r\n            vec3.set(this.tpmVec, ...args);\r\n\r\n        } else {\r\n\r\n            throw new Error(\"required 1 or 3 arguments\");\r\n\r\n        }\r\n\r\n        vec3.sub(this.tpmVec, this.tpmVec, this.position);\r\n        vec3.normalize(this.tpmVec, this.tpmVec);\r\n\r\n        const dot = vec3.dot(this.tpmVec, this.up);\r\n\r\n        if(glMatrix.equals(dot, 1)) {\r\n\r\n            vec3.negate(this.up, this.direction);\r\n\r\n        } else if(glMatrix.equals(dot, -1)) {\r\n\r\n            vec3.copy(this.up, this.direction);\r\n\r\n        }\r\n\r\n        vec3.copy(this.direction, this.tpmVec);\r\n\r\n        vec3.cross(this.up, this.getRight(), this.direction);\r\n        vec3.normalize(this.up, this.up);\r\n    }\r\n\r\n    getRight() {\r\n        return vec3.cross(this.tpmVec, this.direction, this.up);\r\n    }\r\n\r\n    updateConstants(constants) {\r\n        mat4.lookAt(this.viewMatrix, this.position, vec3.add(this.tpmVec, this.position, this.direction), this.up);\r\n        mat4.invert(this.cameraMatrix, this.viewMatrix);\r\n\r\n        constants[\"projectionMatrix\"] = this.projectionMatrix;\r\n        constants[\"viewMatrix\"] = this.viewMatrix;\r\n        constants[\"cameraMatrix\"] = this.cameraMatrix;\r\n        constants[\"cameraPosition\"] = this.position;\r\n    }\r\n}\r\n\r\nexport {\r\n    Camera\r\n}", "import { Gol } from \"../gol.js\";\r\nimport { Shader } from \"./shader.js\";\r\n\r\n\r\nclass Mesh {\r\n\r\n    /**\r\n     * \r\n     * @type { Map<string, { size: number, data: number[], buffer: WebGLBuffer }> }\r\n     */\r\n    buffers = new Map();\r\n\r\n    /**\r\n     * \r\n     * @type {number}\r\n     */\r\n     indexCount = 0;\r\n\r\n    /**\r\n     * \r\n     * @type {Object}\r\n     */\r\n    options;\r\n\r\n    constructor(opts = {}) {\r\n\r\n        this.options = opts;\r\n\r\n        this.onInit();\r\n    }\r\n\r\n    onInit() {}\r\n\r\n    createBuffer(name, size) {\r\n        const info = {\r\n            size,\r\n            data: [],\r\n            buffer: null\r\n        };\r\n        this.buffers.set(name, info);\r\n        return info;\r\n    }\r\n\r\n    getBuffer(name) {\r\n        return this.buffers.get(name);\r\n    }\r\n\r\n    bufferData(data, size, name) {\r\n\r\n        this.buffers.set(name, {\r\n            size,\r\n            data,\r\n            buffer: null\r\n        });\r\n    }\r\n\r\n    initBuffer(name) {\r\n        const info = this.buffers.get(name);\r\n        if(info.buffer == null) {\r\n            info.buffer = Gol.gl.createBuffer();\r\n        }\r\n        if(name == \"index\") {\r\n            Gol.gl.bindBuffer(Gol.gl.ELEMENT_ARRAY_BUFFER, info.buffer);\r\n            Gol.gl.bufferData(Gol.gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(info.data), Gol.gl.STATIC_DRAW);\r\n            this.indexCount = info.data.length;\r\n        } else {\r\n            Gol.gl.bindBuffer(Gol.gl.ARRAY_BUFFER, info.buffer);\r\n            Gol.gl.bufferData(Gol.gl.ARRAY_BUFFER, new Float32Array(info.data), Gol.gl.STATIC_DRAW);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {Shader} shader \r\n     */\r\n    bind(shader) {\r\n\r\n        this.buffers.forEach((info, name) => {\r\n\r\n            const loc = shader.shaderData.attribs[name];\r\n\r\n            if(loc != -1) {\r\n                if(info.buffer == null) {\r\n                    this.initBuffer(name);\r\n                }\r\n\r\n                if (name == \"index\") {\r\n                    Gol.gl.bindBuffer(Gol.gl.ELEMENT_ARRAY_BUFFER, info.buffer);\r\n                } else {\r\n                    Gol.gl.bindBuffer(Gol.gl.ARRAY_BUFFER, info.buffer);\r\n                    Gol.gl.vertexAttribPointer(loc, info.size, Gol.gl.FLOAT, false, 0, 0);\r\n                    Gol.gl.enableVertexAttribArray(loc);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    draw() {\r\n        Gol.gl.drawElements(Gol.gl.TRIANGLES, this.indexCount, Gol.gl.UNSIGNED_SHORT, 0);\r\n    }\r\n\r\n    unbind(shader) {\r\n        this.buffers.forEach((info, name) => {\r\n\r\n            const loc = shader.shaderData.attribs[name];\r\n\r\n            if(loc != -1) {\r\n                if (name != \"index\") {\r\n                    Gol.gl.disableVertexAttribArray(loc);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n}\r\n\r\nexport {\r\n    Mesh\r\n}", "import { Gol } from \"../gol.js\";\r\nimport { Shader } from \"./shader.js\";\r\n\r\nclass ShaderInstance {\r\n\r\n    /**\r\n     * \r\n     * @type {Shader}\r\n     */\r\n     shaderData;\r\n\r\n    /**\r\n     * \r\n     * @type {Map<string, number | Float32List>}\r\n     */\r\n    uniforms = new Map();\r\n\r\n    constructor(shader) {\r\n        this.shaderData = shader;\r\n\r\n        this.setUniform(\"uvOffset\", [0, 0]);\r\n    }\r\n\r\n    setUniform(name, val) {\r\n        this.uniforms.set(name, val);\r\n    }\r\n\r\n    activate() {\r\n        this.shaderData.activate();\r\n    }\r\n\r\n    bind(constants) {\r\n        for(let info of this.shaderData.uniforms) {\r\n            let value = constants[info.name];\r\n            if (this.uniforms.has(info.name)) {\r\n                value = this.uniforms.get(info.name);\r\n            }\r\n\r\n            if (value && info.location) {\r\n                const type = info.type;\r\n                const loc = info.location;\r\n\r\n                switch (type) {\r\n                    case \"mat4\":\r\n                        Gol.gl.uniformMatrix4fv(loc, false, value);\r\n                        break;\r\n                    case \"mat3\":\r\n                        Gol.gl.uniformMatrix3fv(loc, false, val);\r\n                        break;\r\n                    case \"vec4\":\r\n                        Gol.gl.uniform4fv(loc, value);\r\n                        break;\r\n                    case \"vec3\":\r\n                        Gol.gl.uniform3fv(loc, value);\r\n                        break;\r\n                    case \"vec2\":\r\n                        Gol.gl.uniform2fv(loc, value);\r\n                        break;\r\n                    case \"float\":\r\n                        Gol.gl.uniform1f(loc, value);\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport {\r\n    ShaderInstance\r\n}", "import { mat3, mat4, quat, vec3 } from \"gl-matrix\";\r\nimport { Mesh } from \"./mesh.js\";\r\nimport { ShaderInstance } from \"./shader-instance.js\";\r\nimport { Texture } from \"./texture.js\";\r\n\r\nclass Drawable {\r\n\r\n    /**\r\n     * \r\n     * @type {Mesh}\r\n     */\r\n    mesh;\r\n\r\n    /**\r\n     * \r\n     * @type {ShaderInstance}\r\n     */\r\n    shader;\r\n\r\n    /**\r\n     * \r\n     * @type {Texture}\r\n     */\r\n    texture;\r\n\r\n    /**\r\n     * \r\n     * @type {vec3}\r\n     */\r\n    position = vec3.create();\r\n\r\n    /**\r\n     * \r\n     * @type {quat}\r\n     */\r\n    rotation = quat.create();\r\n\r\n    /**\r\n     * \r\n     * @type {vec3}\r\n     */\r\n     scale = vec3.fromValues(1, 1, 1);\r\n\r\n     /**\r\n      * \r\n      * @type {Drawable}\r\n      */\r\n     parent = null;\r\n\r\n     /**\r\n      * \r\n      * @type {mat4}\r\n      */\r\n     modelMatrix = mat4.create();\r\n\r\n     /**\r\n      * \r\n      * @type {mat4}\r\n      */\r\n      normalMatrix = mat4.create();\r\n    \r\n     /**\r\n      * \r\n      * @type {boolean}\r\n      */\r\n     matrixAutoUpdate = true;\r\n\r\n     /**\r\n      * \r\n      * @type {boolean}\r\n      */\r\n     matrixNeedsUpdate = true;\r\n\r\n    constructor(mesh, shader, texture) {\r\n        this.mesh = mesh;\r\n        this.shader = shader;\r\n        this.texture = texture;\r\n    }\r\n\r\n    setShader(shader) {\r\n        this.shader = shader;\r\n    }\r\n\r\n    updateMatrix() {\r\n        if(this.matrixNeedsUpdate || this.matrixAutoUpdate) {\r\n            this.matrixNeedsUpdate = false;\r\n\r\n            mat4.fromRotationTranslationScale(\r\n                this.modelMatrix,\r\n                this.rotation,\r\n                this.position,\r\n                this.scale);\r\n\r\n            mat3.fromMat4(this.normalMatrix, this.modelMatrix);\r\n            mat3.invert(this.normalMatrix, this.normalMatrix);\r\n            mat3.transpose(this.normalMatrix, this.normalMatrix);\r\n        }\r\n    }\r\n\r\n    draw(constants) {\r\n        this.shader.activate();\r\n\r\n        if(this.texture) {\r\n            this.texture.bind();\r\n        }\r\n\r\n        this.updateMatrix();\r\n\r\n        const viewMatrix = constants.viewMatrix;\r\n        const modelViewMatrix = mat4.create();\r\n        mat4.multiply(modelViewMatrix, viewMatrix, this.modelMatrix);\r\n\r\n        this.shader.setUniform(\"modelViewMatrix\", modelViewMatrix);\r\n        this.shader.setUniform(\"modelMatrix\", this.modelMatrix);\r\n        this.shader.setUniform(\"normalMatrix\", this.normalMatrix);\r\n\r\n        this.shader.bind(constants);\r\n        this.mesh.bind(this.shader);\r\n\r\n        this.mesh.draw();\r\n\r\n        this.mesh.unbind(this.shader);\r\n    }\r\n\r\n}\r\n\r\nexport {\r\n    Drawable\r\n}", "import { mat4, vec3 } from \"gl-matrix\";\r\nimport { Camera } from \"./camera.js\";\r\n\r\n\r\nclass PerspectiveCamera extends Camera {\r\n\r\n    /**\r\n     * \r\n     * @type {number}\r\n     */\r\n    fov;\r\n\r\n    constructor(fov, viewportWidth, viewportHeight, near, far) {\r\n        super();\r\n        this.fov = fov;\r\n        this.viewportWidth = viewportWidth;\r\n        this.viewportHeight = viewportHeight;\r\n        this.near = near;\r\n        this.far = far;\r\n\r\n        this.updateProjection();\r\n    }\r\n\r\n    updateProjection() {\r\n        const aspect = this.viewportWidth / this.viewportHeight;\r\n        mat4.perspective(this.projectionMatrix, this.fov / 180 * Math.PI, aspect, this.near, this.far);\r\n    }\r\n\r\n}\r\n\r\nexport {\r\n    PerspectiveCamera\r\n}", "import { Cube } from \"./cube.js\";\r\nimport { Plane } from \"./plane.js\";\r\nimport { Quad } from \"./quad.js\";\r\nimport { Sphere } from \"./sphere.js\";\r\n\r\nexport {\r\n    Quad,\r\n    Cube,\r\n    Plane,\r\n    Sphere\r\n}", "import { Mesh } from \"../mesh.js\";\r\n\r\nclass Cube extends Mesh {\r\n\r\n    onInit() {\r\n\r\n        const halfWidth = this.options.width ? this.options.width / 2 : 0.5;\r\n        const halfHeight = this.options.height ? this.options.height / 2 : 0.5;\r\n        const halfDepth = this.options.depth ? this.options.depth / 2 : 0.5;\r\n\r\n        const positions = [\r\n            // Front face\r\n            -halfWidth, halfHeight, halfDepth,\r\n            halfWidth, halfHeight, halfDepth,\r\n            halfWidth, -halfHeight, halfDepth,\r\n            -halfWidth, -halfHeight, halfDepth,\r\n\r\n            // Back face\r\n            -halfWidth, halfHeight, -halfDepth,\r\n            halfWidth, halfHeight, -halfDepth,\r\n            halfWidth, -halfHeight, -halfDepth,\r\n            -halfWidth, -halfHeight, -halfDepth,\r\n\r\n            // Top face\r\n            -halfWidth, halfHeight, -halfDepth,\r\n            halfWidth, halfHeight, -halfDepth,\r\n            halfWidth, halfHeight, halfDepth,\r\n            -halfWidth, halfHeight, halfDepth,\r\n\r\n            // Bottom face\r\n            -halfWidth, -halfHeight, halfDepth,\r\n            halfWidth, -halfHeight, halfDepth,\r\n            halfWidth, -halfHeight, -halfDepth,\r\n            -halfWidth, -halfHeight, -halfDepth,\r\n\r\n            // Right face\r\n            halfWidth, halfHeight, halfDepth,\r\n            halfWidth, halfHeight, -halfDepth,\r\n            halfWidth, -halfHeight, -halfDepth,\r\n            halfWidth, -halfHeight, halfDepth,\r\n\r\n            // Left face\r\n            -halfWidth, halfHeight, -halfDepth,\r\n            -halfWidth, halfHeight, halfDepth,\r\n            -halfWidth, -halfHeight, halfDepth,\r\n            -halfWidth, -halfHeight, -halfDepth,\r\n        ];\r\n\r\n        const normals = [\r\n            // Front face\r\n            0.0, 0.0, 1.0,\r\n            0.0, 0.0, 1.0,\r\n            0.0, 0.0, 1.0,\r\n            0.0, 0.0, 1.0,\r\n\r\n            // Back face\r\n            0.0, 0.0, -1.0,\r\n            0.0, 0.0, -1.0,\r\n            0.0, 0.0, -1.0,\r\n            0.0, 0.0, -1.0,\r\n\r\n            // Top face\r\n            0.0, 1.0, 0.0,\r\n            0.0, 1.0, 0.0,\r\n            0.0, 1.0, 0.0,\r\n            0.0, 1.0, 0.0,\r\n\r\n            // Bottom face\r\n            0.0, -1.0, 0.0,\r\n            0.0, -1.0, 0.0,\r\n            0.0, -1.0, 0.0,\r\n            0.0, -1.0, 0.0,\r\n\r\n            // Right face\r\n            1.0, 0.0, 0.0,\r\n            1.0, 0.0, 0.0,\r\n            1.0, 0.0, 0.0,\r\n            1.0, 0.0, 0.0,\r\n\r\n            // Left face\r\n            -1.0, 0.0, 0.0,\r\n            -1.0, 0.0, 0.0,\r\n            -1.0, 0.0, 0.0,\r\n            -1.0, 0.0, 0.0,\r\n        ];\r\n\r\n        let textureFaces = \"single\";\r\n        if(this.options.textureFaces !== undefined) {\r\n            textureFaces = this.options.textureFaces;\r\n        }\r\n\r\n        const uvs = [];\r\n\r\n        if(textureFaces == \"single\") {\r\n\r\n            for(let i = 0; i < 6; ++i) {\r\n                uvs.push(\r\n                    0, 0,\r\n                    1, 0,\r\n                    1, 1,\r\n                    0, 1\r\n                );\r\n            }\r\n\r\n        } else if(textureFaces == \"multiple\") {\r\n\r\n            const w = 0.25, h = 0.5;\r\n\r\n            const add = (x, y) => {\r\n                uvs.push(\r\n                    x * w, y * h,\r\n                    w * (x + 1), y * h,\r\n                    w * (x + 1), h * (y + 1),\r\n                    x * w, h * (y + 1)\r\n                );\r\n            }\r\n\r\n            // Front face\r\n            add(1, 0);\r\n            // Back face\r\n            add(3, 0);\r\n            // Top face\r\n            add(0, 1);\r\n            // Bottom face\r\n            add(1, 1);\r\n            // Right face\r\n            add(2, 0);\r\n            // Left face\r\n            add(0, 0);\r\n\r\n        } else {\r\n            throw new Error(\"options.textureFaces valid values are single or multiple\");\r\n        }\r\n\r\n        const indices = [\r\n            0, 1, 2, 0, 2, 3,    // front\r\n            4, 5, 6, 4, 6, 7,    // back\r\n            8, 9, 10, 8, 10, 11,   // top\r\n            12, 13, 14, 12, 14, 15,   // bottom\r\n            16, 17, 18, 16, 18, 19,   // right\r\n            20, 21, 22, 20, 22, 23,   // left\r\n        ];\r\n\r\n\r\n        const faceColors = [];\r\n\r\n        if(this.options.colors === undefined) {\r\n\r\n            for(let i = 0; i < 24; ++i) {\r\n                faceColors.push(1);\r\n            }\r\n \r\n         } else if(this.options.colors.length == 1) {\r\n \r\n             const c = this.options.colors[0];\r\n \r\n             for(let i = 0; i < 24; ++i) {\r\n                 faceColors.push(c[i % 4]);\r\n             }\r\n \r\n         } else if(this.options.colors.length == 6) {\r\n             \r\n             for(let i = 0; i < 6; ++i) {\r\n                 const c = this.options.colors[i];\r\n                 for(let j = 0; j < 4; ++j) {\r\n                     faceColors.push(c[j]);\r\n                 }\r\n             }\r\n \r\n         } else {\r\n \r\n             throw new Error(\"options.colors requires 1 or 6 elements\");\r\n         }\r\n\r\n        const colors = [];\r\n        for (let i = 0; i < 6; ++i) {\r\n            for (let j = 0; j < 4; ++j) {\r\n                for (let k = 0; k < 4; ++k) {\r\n                    colors.push(faceColors[i * 4 + k]);\r\n                }\r\n            }\r\n        }\r\n\r\n        this.bufferData(positions, 3, \"positions\");\r\n        this.bufferData(normals, 3, \"normals\");\r\n        this.bufferData(colors, 4, \"colors\");\r\n        this.bufferData(uvs, 2, \"uvs\");\r\n        this.bufferData(indices, 0, \"index\");\r\n    }\r\n\r\n}\r\n\r\nexport {\r\n    Cube\r\n}", "import { Mesh } from \"../mesh.js\";\r\n\r\n\r\nclass Plane extends Mesh {\r\n\r\n    onInit() {\r\n\r\n        const halfWidth = this.options.width ? this.options.width / 2 : 0.5;\r\n        const halfDepth = this.options.depth ? this.options.depth / 2 : 0.5;\r\n        const widthSegments = this.options.widthSegments || 1;\r\n        const depthSegments = this.options.depthSegments  || 1;\r\n        const heightMap = this.options.heightMap  || Plane.generateHeightMap(widthSegments, depthSegments);\r\n\r\n        const positions = [];\r\n        const normals = [];\r\n        const uvs = [];\r\n        const colors = [];\r\n        const indices = [];\r\n\r\n        for (let i = 0; i < depthSegments; ++i) {\r\n            for (let j = 0; j < widthSegments; ++j) {\r\n\r\n                positions.push(\r\n                    (2 * j / widthSegments - 1) * halfWidth, heightMap[i][j], (2 * i / depthSegments - 1) * halfDepth,\r\n                    (2 * (j + 1) / widthSegments - 1) * halfWidth, heightMap[i][j + 1], (2 * i / depthSegments - 1) * halfDepth,\r\n                    (2 * (j + 1) / widthSegments - 1) * halfWidth, heightMap[i + 1][j + 1], (2 * (i + 1) / depthSegments - 1) * halfDepth,\r\n                    (2 * j / widthSegments - 1) * halfWidth, heightMap[i + 1][j], (2 * (i + 1) / depthSegments - 1) * halfDepth\r\n                );\r\n\r\n                normals.push(\r\n                    0, 1, 0,\r\n                    0, 1, 0,\r\n                    0, 1, 0,\r\n                    0, 1, 0\r\n                );\r\n\r\n                if (this.options.textureRepeat === undefined || this.options.textureRepeat === false) {\r\n                    uvs.push(\r\n                        j / widthSegments, i / depthSegments,\r\n                        (j + 1) / widthSegments, i / depthSegments,\r\n                        (j + 1) / widthSegments, (i + 1) / depthSegments,\r\n                        j / widthSegments, (i + 1) / depthSegments\r\n                    );\r\n                } else {\r\n                    uvs.push(\r\n                        0, 0,\r\n                        1, 0,\r\n                        1, 1,\r\n                        0, 1\r\n                    );\r\n                }\r\n\r\n                const indexOffset = (i * widthSegments + j) * 4;\r\n                indices.push(\r\n                    indexOffset, indexOffset + 1, indexOffset + 2,\r\n                    indexOffset, indexOffset + 2, indexOffset + 3\r\n                );\r\n\r\n            }\r\n        }\r\n\r\n        if (this.options.colors === undefined) {\r\n\r\n            for (let i = 0; i < widthSegments * depthSegments * 16; ++i) {\r\n                colors.push(1);\r\n            }\r\n\r\n        } else if (typeof this.options.colors == \"function\") {\r\n            const func = this.options.colors;\r\n\r\n            const colorCache = [];\r\n            for(let i = 0; i <= depthSegments; ++i) {\r\n                colorCache.push([]);\r\n                for(let j = 0; j <= widthSegments; ++j) {\r\n                    const c = func(j / widthSegments * halfWidth * 2 - halfWidth, heightMap[i][j], i / depthSegments * halfDepth * 2 - halfDepth);\r\n                    colorCache[i].push(c);\r\n                }\r\n            }\r\n\r\n            for (let i = 0; i < depthSegments; ++i) {\r\n                for (let j = 0; j < widthSegments; ++j) {\r\n                    colors.push(\r\n                        ...colorCache[i][j],\r\n                        ...colorCache[i][j + 1],\r\n                        ...colorCache[i + 1][j + 1],\r\n                        ...colorCache[i + 1][j],\r\n                    );\r\n                }\r\n            }\r\n\r\n        } else if (this.options.colors.length == 1) {\r\n\r\n            const c = this.options.colors[0];\r\n\r\n            for (let i = 0; i < widthSegments * depthSegments * 16; ++i) {\r\n                colors.push(c[i % 4]);\r\n            }\r\n\r\n        } else {\r\n\r\n            throw new Error(\"options.colors requires 1 elements\");\r\n        }\r\n\r\n        this.bufferData(positions, 3, \"positions\");\r\n        this.bufferData(normals, 3, \"normals\");\r\n        this.bufferData(colors, 4, \"colors\");\r\n        this.bufferData(uvs, 2, \"uvs\");\r\n        this.bufferData(indices, 0, \"index\");\r\n\r\n    }\r\n\r\n    static generateHeightMap(widthSegments, depthSegments) {\r\n        return [...new Array(depthSegments + 1)].map(e => [...new Array(widthSegments + 1)].fill(0));\r\n    }\r\n\r\n}\r\n\r\nexport {\r\n    Plane\r\n}", "import { Mesh } from \"../mesh.js\";\r\n\r\nclass Quad extends Mesh {\r\n\r\n    onInit() {\r\n\r\n        const halfWidth = this.options.width ? this.options.width / 2 : 0.5;\r\n        const halfHeight = this.options.height ? this.options.height / 2 : 0.5;\r\n\r\n        const positions = [\r\n            -halfWidth, halfHeight, 0,\r\n            halfWidth, halfHeight, 0,\r\n            halfWidth, -halfHeight, 0,\r\n            -halfWidth, -halfHeight, 0\r\n        ];\r\n\r\n        const normals = [\r\n            0, 0, 1,\r\n            0, 0, 1,\r\n            0, 0, 1,\r\n            0, 0, 1\r\n        ];\r\n\r\n        const colors = [];\r\n\r\n        if(this.options.colors === undefined) {\r\n\r\n           for(let i = 0; i < 16; ++i) {\r\n               colors.push(1);\r\n           }\r\n\r\n        } else if(this.options.colors.length == 1) {\r\n\r\n            const c = this.options.colors[0];\r\n\r\n            for(let i = 0; i < 16; ++i) {\r\n                colors.push(c[i % 4]);\r\n            }\r\n\r\n        } else if(this.options.colors.length == 4) {\r\n            \r\n            for(let i = 0; i < 4; ++i) {\r\n                const c = this.options.colors[i];\r\n                for(let j = 0; j < 4; ++j) {\r\n                    colors.push(c[j]);\r\n                }\r\n            }\r\n\r\n        } else {\r\n\r\n            throw new Error(\"options.colors requires 1 or 4 elements\");\r\n        }\r\n\r\n        const uvs = [\r\n            0, 0,\r\n            1, 0,\r\n            1, 1,\r\n            0, 1\r\n        ];\r\n\r\n        const indices = [\r\n            0, 1, 2,\r\n            0, 2, 3\r\n        ];\r\n\r\n        this.bufferData(positions, 3, \"positions\");\r\n        this.bufferData(normals, 3, \"normals\");\r\n        this.bufferData(colors, 4, \"colors\");\r\n        this.bufferData(uvs, 2, \"uvs\");\r\n        this.bufferData(indices, 0, \"index\");\r\n    }\r\n\r\n}\r\n\r\nexport {\r\n    Quad\r\n}", "\r\nclass LinearSpline {\r\n\r\n    points = [];\r\n\r\n    constructor(lerp) {\r\n        this.lerp = lerp;\r\n    }\r\n\r\n    addPoint(t, val) {\r\n        this.points.push([t, val]);\r\n        for(let i = this.points.length - 1; i > 0; --i) {\r\n            if(this.points[i][0] >= this.points[i - 1][0]) {\r\n                break;\r\n            }\r\n            [this.points[i], this.points[i - 1]] = [this.points[i - 1], this.points[i]];\r\n        }\r\n    }\r\n\r\n    getValue(t) {\r\n        let idx1 = 0;\r\n\r\n        for(let i = 0; i < this.points.length; ++i) {\r\n            if(t < this.points[i][0]) {\r\n                break;\r\n            }\r\n            idx1 = i;\r\n        }\r\n\r\n        const p1 = this.points[idx1];\r\n\r\n        let idx2 = Math.min(idx1 + 1, this.points.length - 1);\r\n\r\n        if(idx1 == idx2) {\r\n            return p1[1];\r\n        }\r\n\r\n        const p2 = this.points[idx2];\r\n\r\n        return this.lerp((t - p1[0]) / (p2[0] - p1[0]), \r\n            p1[1], \r\n            p2[1]);\r\n    }\r\n\r\n}\r\n\r\nexport {\r\n    LinearSpline\r\n}", "import { vec4 } from \"gl-matrix\";\r\nimport { LinearSpline } from \"../../math/linear-spline.js\";\r\nimport { Mesh } from \"../mesh.js\";\r\n\r\nclass Sphere extends Mesh {\r\n\r\n    onInit() {\r\n\r\n        if(this.options.radius === undefined) {\r\n            this.options.radius = 0.5;\r\n        }\r\n        const radius = this.options.radius;\r\n        const widthSegments = this.options.widthSegments || 32;\r\n        const heightSegments = this.options.heightSegments || 16;\r\n\r\n        const positions = [];\r\n        const uvs = [];\r\n        const colors = [];\r\n        const indices = [];\r\n\r\n        const positionCache = [];\r\n        const uvCache = [];\r\n        const colorCache = [];\r\n\r\n        for (let i = 0; i <= heightSegments; ++i) {\r\n\r\n            const angle1 = i / heightSegments * Math.PI;\r\n            const sin1 = Math.sin(angle1);\r\n            const cos1 = Math.cos(angle1);\r\n\r\n            for (let j = 0; j <= widthSegments; ++j) {\r\n\r\n                const angle2 = j / widthSegments * 2 * Math.PI;\r\n                const sin2 = Math.sin(angle2);\r\n                const cos2 = Math.cos(angle2);\r\n\r\n                positionCache.push([\r\n                    sin1 * cos2 * radius,\r\n                    cos1 * radius,\r\n                    sin1 * sin2 * radius\r\n                ]);\r\n                uvCache.push([\r\n                    1 - j / widthSegments,\r\n                    i / heightSegments\r\n                ]);\r\n            }\r\n        }\r\n\r\n        if (this.options.colors === undefined) {\r\n\r\n            for (let i = 0; i < (widthSegments + 1) * (heightSegments + 1); ++i) {\r\n                colorCache.push([1, 1, 1, 1]);\r\n            }\r\n\r\n        } else if(this.options.colors instanceof LinearSpline) {\r\n\r\n            for(let i = 0; i <= heightSegments; ++i) {\r\n\r\n                const c = this.options.colors.getValue(i / heightSegments);\r\n\r\n                for(let j = 0; j <= widthSegments; ++j) {\r\n                    colorCache.push(c);\r\n                }\r\n            }\r\n\r\n        } else if (this.options.colors.length == 1) {\r\n\r\n            const c = this.options.colors[0];\r\n\r\n            for (let i = 0; i < (widthSegments + 1) * (heightSegments + 1); ++i) {\r\n                colorCache.push(c);\r\n            }\r\n\r\n        } else {\r\n\r\n            throw new Error(\"options.colors requires 1 elements\");\r\n        }\r\n\r\n        let indexOffset = 0;\r\n        for(let i = 0; i < heightSegments; ++i) {\r\n            for(let j = 0; j < widthSegments; ++j) {\r\n\r\n                const p1 = i * (widthSegments + 1) + j;\r\n                const p2 = p1 + (widthSegments + 1);\r\n\r\n                const indexCache = [p1, p1 + 1, p2 + 1, p2];\r\n\r\n                for(let idx of indexCache) {\r\n                    positions.push(...positionCache[idx]);\r\n                    uvs.push(...uvCache[idx]);\r\n                    colors.push(...colorCache[idx]);\r\n                }\r\n\r\n                indices.push(\r\n                    indexOffset, indexOffset + 1, indexOffset + 2,\r\n                    indexOffset, indexOffset + 2, indexOffset + 3\r\n                );\r\n                indexOffset += 4;\r\n            }\r\n        }\r\n\r\n        this.bufferData(positions, 3, \"positions\");\r\n        this.bufferData(colors, 4, \"colors\");\r\n        this.bufferData(uvs, 2, \"uvs\");\r\n        this.bufferData(indices, 0, \"index\");\r\n\r\n    }\r\n\r\n}\r\n\r\nexport {\r\n    Sphere\r\n}", "import { mat4, vec2, vec3 } from \"gl-matrix\";\r\nimport { Camera } from \"./camera.js\";\r\n\r\nclass OrthographicCamera extends Camera {\r\n\r\n    /**\r\n     * \r\n     * @type {number}\r\n     */\r\n    zoom = 1;\r\n\r\n    constructor(width, height) {\r\n        super();\r\n\r\n        this.near = 0;\r\n        this.setToOrtho(width, height);\r\n    }\r\n\r\n    setToOrtho(width, height) {\r\n        this.viewportWidth = width;\r\n        this.viewportHeight = height;\r\n\r\n        vec3.set(this.position, this.zoom * width / 2, this.zoom * height / 2, 0);\r\n\r\n        this.updateProjection();\r\n    }\r\n\r\n    updateProjection() {\r\n        mat4.ortho(this.projectionMatrix,\r\n            this.zoom * -this.viewportWidth / 2,\r\n            this.zoom * this.viewportWidth / 2,\r\n            this.zoom * -this.viewportHeight / 2,\r\n            this.zoom * this.viewportHeight / 2,\r\n            this.near,\r\n            this.far);\r\n    }\r\n\r\n    translate(...args) {\r\n\r\n        if(args.length == 1) {\r\n            vec3.set(this.position, ...args[0], 0);\r\n        } else if(args.length == 2) {\r\n            vec3.set(this.position, args[0], args[1], 0);\r\n        } else {\r\n\r\n            throw new Error(\"required 1 or 2 arguments\");\r\n        }\r\n    }\r\n\r\n    zoomBy(...args) {\r\n        const val = args[0];\r\n\r\n        this.zoom *= 1 + val;\r\n\r\n        if(args.length == 2 || args.length == 3) {\r\n            const delta = vec2.create();\r\n            \r\n            if(args.length == 2) {\r\n                vec2.copy(delta, args[1]);\r\n            } else {\r\n                vec2.set(delta, ...args);\r\n            }\r\n\r\n            vec2.sub(delta, delta, this.position);\r\n            vec2.scale(delta, delta, val);\r\n            \r\n            vec3.add(this.position, this.position, [...delta, 0]);\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\nexport {\r\n    OrthographicCamera\r\n}", "import { Gol } from \"../gol.js\";\r\nimport { Drawable } from \"./drawable.js\";\r\nimport { Quad } from \"./meshes/quad.js\";\r\nimport { ShaderInstance } from \"./shader-instance.js\";\r\n\r\nclass Sprite extends Drawable {\r\n\r\n    regionX;\r\n\r\n    regionY;\r\n\r\n    regionWidth;\r\n\r\n    regionHeight;\r\n\r\n    constructor(...args) {\r\n        const texture = args[0];\r\n        let srcX = 0;\r\n        let srcY = 0;\r\n        let srcWidth = texture.width;\r\n        let srcHeight = texture.height;\r\n        if(args.length == 3) {\r\n            srcWidth = args[1];\r\n            srcHeight = args[2];\r\n        } else if(args.length == 5) {\r\n            srcX = args[1];\r\n            srcY = args[2];\r\n            srcWidth = args[3];\r\n            srcHeight = args[4];\r\n        }\r\n        super(\r\n            new Quad(),\r\n            new ShaderInstance(Gol.graphics.getShader(\"texture\")),\r\n            texture\r\n        );\r\n\r\n        //this.setRegionSize(srcWidth, srcHeight);\r\n        //this.setRegionPosition(srcX, srcY);\r\n        this.setRegion(srcX, srcY, srcWidth, srcHeight);\r\n    }\r\n\r\n    setRegion(x, y, width, height) {\r\n        this.regionX = x;\r\n        this.regionY = y;\r\n        this.regionWidth = width;\r\n        this.regionHeight = height;\r\n\r\n        const texWidth = this.texture.width, texHeight = this.texture.height;\r\n\r\n        const uvs = [\r\n            x / texWidth, y / texHeight,\r\n            (x + width) / texWidth, y / texHeight,\r\n            (x + width) / texWidth, (y + height) / texHeight,\r\n            x / texWidth, (y + height) / texHeight\r\n        ];\r\n        this.mesh.bufferData(uvs, 2, \"uvs\");\r\n    }\r\n\r\n    setRegionSize(width, height) {\r\n        this.regionWidth = width;\r\n        this.regionHeight = height;\r\n\r\n        const uvs = [\r\n            0, 0,\r\n            width / this.texture.width, 0,\r\n            width / this.texture.width, height / this.texture.height,\r\n            0, height / this.texture.height\r\n        ];\r\n        this.mesh.bufferData(uvs, 2, \"uvs\");\r\n    }\r\n\r\n    setRegionPosition(x, y) {\r\n        this.regionX = x;\r\n        this.regionY = y;\r\n        this.shader.setUniform(\"uvOffset\", [x / this.texture.width, y / this.texture.height]);\r\n    }\r\n\r\n}\r\n\r\nexport {\r\n    Sprite\r\n}", "import { Gol } from \"../gol.js\";\r\nimport { Drawable } from \"./drawable.js\";\r\nimport { Font } from \"./font.js\";\r\nimport { Mesh } from \"./mesh.js\";\r\nimport { ShaderInstance } from \"./shader-instance.js\";\r\n\r\nclass TextDrawable extends Drawable {\r\n\r\n    /**\r\n     * \r\n     * @type {Font}\r\n     */\r\n    font;\r\n\r\n    /**\r\n     * \r\n     * @type {string}\r\n     */\r\n    text;\r\n\r\n    rainbow;\r\n\r\n    constructor(font, text = \"\", rainbow = false) {\r\n        super(\r\n            new Mesh(),\r\n            new ShaderInstance(Gol.graphics.getShader(\"texture\")),\r\n            font.texture\r\n        );\r\n\r\n        this.font = font;\r\n        this.text = text;\r\n        this.rainbow = rainbow;\r\n\r\n        this.updateGeometry();\r\n    }\r\n\r\n    updateGeometry() {\r\n\r\n        const positions = [];\r\n        const colors = [];\r\n        const uvs = [];\r\n        const indices = [];\r\n\r\n        const charWidth = this.font.charWidth;\r\n        const charHeight = this.font.charHeight;\r\n        const charRatio = this.font.options.charRatio;\r\n\r\n        let offsetX = (1 - this.text.length) * charRatio * 0.5;\r\n\r\n        for(let i = 0; i < this.text.length; ++i) {\r\n            const char = this.text.charCodeAt(i);\r\n\r\n            const charPosition = this.font.getCharPosition(char);\r\n\r\n            if(charPosition === null) {\r\n                continue;\r\n            }\r\n\r\n            const [x, y] = charPosition;\r\n\r\n            positions.push(\r\n                -0.5 * charRatio + offsetX, 0.5, 0,\r\n                0.5 * charRatio + offsetX, 0.5, 0,\r\n                0.5 * charRatio + offsetX, -0.5, 0,\r\n                -0.5 * charRatio + offsetX, -0.5, 0\r\n            );\r\n\r\n            uvs.push(\r\n                x / this.texture.width, y / this.texture.height,\r\n                (x + charWidth) / this.texture.width, y / this.texture.height,\r\n                (x + charWidth) / this.texture.width, (y + charHeight) / this.texture.height,\r\n                x / this.texture.width, (y + charHeight) / this.texture.height\r\n            );\r\n\r\n            const indexOffset = i * 4;\r\n            indices.push(\r\n                indexOffset, indexOffset + 1, indexOffset + 2,\r\n                indexOffset, indexOffset + 2, indexOffset + 3\r\n            );\r\n\r\n            offsetX += charRatio;\r\n\r\n        }\r\n\r\n        if(this.rainbow) {\r\n            for(let i = 0; i < 4 * this.text.length; ++i) {\r\n                colors.push(Math.random(), Math.random(), Math.random(), 1);\r\n            }\r\n        } else {\r\n            for(let i = 0; i < 4 * this.text.length; ++i) {\r\n                colors.push(1, 1, 1, 1);\r\n            }\r\n        }\r\n\r\n        this.mesh.bufferData(positions, 3, \"positions\");\r\n        this.mesh.bufferData(colors, 4, \"colors\");\r\n        this.mesh.bufferData(uvs, 2, \"uvs\");\r\n        this.mesh.bufferData(indices, 0, \"index\");\r\n    }\r\n\r\n    setText(text) {\r\n        this.text = text;\r\n\r\n        this.updateGeometry();\r\n    }\r\n\r\n}\r\n\r\nexport {\r\n    TextDrawable\r\n}", "import { mat4, vec3 } from \"gl-matrix\";\r\nimport { Gol } from \"../gol.js\";\r\nimport { Mesh } from \"./mesh.js\";\r\nimport { ShaderInstance } from \"./shader-instance.js\";\r\nimport { Shader } from \"./shader.js\";\r\nimport { Texture } from \"./texture.js\";\r\n\r\nclass Particle {\r\n\r\n    /**\r\n     * \r\n     * @type {vec3}\r\n     */\r\n    position;\r\n\r\n    /**\r\n     * \r\n     * @type {vec3}\r\n     */\r\n    velocity;\r\n\r\n    /**\r\n     * \r\n     * @type {vec3}\r\n     */\r\n    color;\r\n\r\n    /**\r\n     * \r\n     * @type {number}\r\n     */\r\n    alpha;\r\n\r\n    /**\r\n     * \r\n     * @type {number}\r\n     */\r\n    size;\r\n\r\n    /**\r\n     * \r\n     * @type {number}\r\n     */\r\n    life;\r\n\r\n    /**\r\n     * \r\n     * @type {number}\r\n     */\r\n    maxLife;\r\n\r\n    constructor(params) {\r\n        this.position = params.position;\r\n        this.maxLife = params.life;\r\n        this.life = params.life;\r\n        this.size = params.size !== undefined ? params.size : 1;\r\n        this.velocity = params.velocity || [0, 0, 0];\r\n        this.color = params.color || [1, 1, 1];\r\n        this.alpha = params.alpha !== undefined ? params.alpha : 1;\r\n    }\r\n\r\n    update() {\r\n        this.life -= Gol.graphics.delta * 1000;\r\n    }\r\n\r\n}\r\n\r\nclass ParticleSystem {\r\n\r\n    /**\r\n     * \r\n     * @type {Mesh}\r\n     */\r\n    mesh;\r\n\r\n    /**\r\n     * \r\n     * @type {Texture}\r\n     */\r\n    texture;\r\n\r\n    /**\r\n     * \r\n     * @type {ShaderInstance}\r\n     */\r\n    shader;\r\n\r\n    /**\r\n     * \r\n     * @type {Particle[]}\r\n     */\r\n    particles = [];\r\n\r\n    constructor(params) {\r\n        this.mesh = new Mesh();\r\n        this.texture = params.texture;\r\n        this.shader = new ShaderInstance(Shader.create(Shader.Type.PARTICLE, params.shaderOptions || {}));\r\n\r\n        this.onScreenResize(Gol.graphics.width, Gol.graphics.height);\r\n    }\r\n\r\n    onScreenResize(width, height) {\r\n        this.shader.setUniform(\"pointMultiplier\", height / 2 * Math.tan(30 * Math.PI / 180));\r\n    }\r\n\r\n    addParticles() {}\r\n\r\n    updateParticles() {}\r\n\r\n    updateGeometry() {\r\n\r\n        const positions = [];\r\n        const colors = [];\r\n        const sizes = [];\r\n\r\n        for(let p of this.particles) {\r\n\r\n            positions.push(...p.position);\r\n            colors.push(...p.color, p.alpha);\r\n            sizes.push(p.size);\r\n        }\r\n\r\n        this.mesh.bufferData(positions, 3, \"positions\");\r\n        this.mesh.bufferData(colors, 4, \"colors\");\r\n        this.mesh.bufferData(sizes, 1, \"sizes\");\r\n    }\r\n\r\n    draw(constants) {\r\n        this.shader.activate();\r\n\r\n        this.texture.bind();\r\n\r\n        const modelMatrix = mat4.create();\r\n\r\n        const viewMatrix = constants.viewMatrix;\r\n        const modelViewMatrix = mat4.create();\r\n        mat4.multiply(modelViewMatrix, viewMatrix, modelMatrix);\r\n\r\n        this.shader.setUniform(\"modelViewMatrix\", modelViewMatrix);\r\n\r\n        this.shader.bind(constants);\r\n        this.mesh.bind(this.shader);\r\n        \r\n        const vertCount = this.particles.length;\r\n\r\n        Gol.gl.drawArrays(Gol.gl.POINTS, 0, vertCount);\r\n\r\n        this.mesh.unbind(this.shader);\r\n    }\r\n\r\n    update() {\r\n        this.addParticles();\r\n        this.updateParticles();\r\n        this.updateGeometry();\r\n    }\r\n\r\n}\r\n\r\nexport {\r\n    ParticleSystem,\r\n    Particle\r\n}", "import { mat4, vec3 } from \"gl-matrix\";\r\nimport { Mesh } from \"./mesh.js\";\r\nimport { Drawable } from \"./drawable.js\";\r\n\r\nclass Batch {\r\n\r\n    static MAX_COUNT = 65536;\r\n\r\n    /**\r\n     * \r\n     * @type {Mesh}\r\n     */\r\n    mesh = new Mesh();\r\n\r\n    /**\r\n     * \r\n     * @type {ShaderInstance}\r\n     */\r\n    shader;\r\n\r\n    /**\r\n     * @type {number}\r\n     */\r\n    idx = 0;\r\n\r\n    /**\r\n     * \r\n     * \r\n     */\r\n    texture = null;\r\n\r\n    /**\r\n     * \r\n     * @type {(position: vec3, drawable: Drawable) => void}\r\n     */\r\n    onCustomProcessPosition = null;\r\n\r\n    /**\r\n     * \r\n     * @type {Object}\r\n     */\r\n    constants = {\r\n        projectionMatrix: mat4.create(),\r\n        viewMatrix: mat4.create(),\r\n        cameraMatrix: mat4.create(),\r\n        cameraPosition: vec3.create(),\r\n    };\r\n\r\n    constructor(shader) {\r\n        this.shader = shader;\r\n\r\n        if(shader.shaderData.attribs[\"index\"] != -1) {\r\n            this.mesh.createBuffer(\"index\", 0);        \r\n        }\r\n        if(shader.shaderData.attribs[\"positions\"] != -1) {\r\n            this.mesh.createBuffer(\"positions\", 3);\r\n        }\r\n        if(shader.shaderData.attribs[\"uvs\"] != -1) {\r\n            this.mesh.createBuffer(\"uvs\", 2);\r\n        }\r\n        if(shader.shaderData.attribs[\"colors\"] != -1) {\r\n            this.mesh.createBuffer(\"colors\", 4);\r\n        }\r\n        \r\n    }\r\n\r\n    setConstants(c) {\r\n        this.constants = { ...c };\r\n    }\r\n\r\n    begin() { \r\n        this.idx = 0;\r\n        this.mesh.buffers.forEach((info) => {\r\n            info.data.length = 0;\r\n        });\r\n        this.texture = null;\r\n    }\r\n\r\n    draw(drawable) {\r\n\r\n        const count = drawable.mesh.getBuffer(\"positions\").data.length / 3;\r\n\r\n        if (\r\n            this.idx + count > Batch.MAX_COUNT ||\r\n            drawable.texture != this.texture\r\n        ) {\r\n            this.flush();\r\n        }\r\n\r\n        this.texture = drawable.texture;\r\n\r\n        drawable.updateMatrix();\r\n\r\n        this.mesh.buffers.forEach((info, name) => {\r\n\r\n            const data = drawable.mesh.getBuffer(name).data;\r\n            \r\n            switch(name) {\r\n                case \"positions\": \r\n                    for(let i = 0; i < data.length; i += 3) {\r\n                        const vec = vec3.fromValues(data[i], data[i + 1], data[i + 2]);\r\n                        if(this.onCustomProcessPosition) {\r\n                            this.onCustomProcessPosition(vec, drawable);\r\n                        }\r\n                        vec3.transformMat4(vec, vec, drawable.modelMatrix);\r\n\r\n                        for(let j = 0; j < 3; ++j) {\r\n                            info.data.push(vec[j]);\r\n                        }\r\n                    }\r\n                    \r\n                    break;\r\n                case \"index\":\r\n                    for (let i = 0; i < data.length; ++i) {\r\n                        info.data.push(data[i] + this.idx);\r\n                    }\r\n                    break;\r\n                default:\r\n                    for (let i = 0; i < data.length; ++i) {\r\n                        info.data.push(data[i]);\r\n                    }\r\n            }\r\n\r\n        });\r\n\r\n        this.idx += count;\r\n    }\r\n\r\n    end() {\r\n\r\n        this.flush();\r\n\r\n    }\r\n\r\n    flush() {\r\n        if (this.idx == 0) {\r\n            return;\r\n        }\r\n\r\n        this.mesh.buffers.forEach((_, name) => {\r\n            this.mesh.initBuffer(name); \r\n        });\r\n\r\n        this.shader.activate();\r\n\r\n        if(this.texture) {\r\n            this.texture.bind();\r\n        }\r\n\r\n        const modelMatrix = mat4.create();\r\n        const normalMatrix = mat4.create();\r\n\r\n        const viewMatrix = this.constants.viewMatrix;\r\n        const modelViewMatrix = mat4.create();\r\n        mat4.multiply(modelViewMatrix, viewMatrix, modelMatrix);\r\n\r\n        this.shader.setUniform(\"modelViewMatrix\", modelViewMatrix);\r\n        this.shader.setUniform(\"modelMatrix\", modelMatrix);\r\n        this.shader.setUniform(\"normalMatrix\", normalMatrix);\r\n\r\n        this.shader.bind(this.constants);\r\n        this.mesh.bind(this.shader);\r\n\r\n        this.mesh.draw();\r\n\r\n        this.mesh.unbind(this.shader);\r\n\r\n        this.idx = 0;\r\n        this.mesh.buffers.forEach((info) => {\r\n            info.data.length = 0;\r\n        });\r\n    }\r\n\r\n}\r\n\r\nexport {\r\n    Batch\r\n}", "import { vec3 } from \"gl-matrix\";\r\nimport { Drawable } from \"./drawable.js\";\r\nimport { Mesh } from \"./mesh.js\";\r\n\r\nclass DrawableGroup extends Drawable {\r\n\r\n    /**\r\n     * \r\n     * @type {number}\r\n     */\r\n    idx = 0;\r\n\r\n    constructor(shader, texture) {\r\n        super(\r\n            new Mesh(), \r\n            shader, \r\n            texture\r\n        );\r\n\r\n        if(shader.shaderData.attribs[\"index\"] != -1) {\r\n            this.mesh.createBuffer(\"index\", 0);        \r\n        }\r\n        if(shader.shaderData.attribs[\"positions\"] != -1) {\r\n            this.mesh.createBuffer(\"positions\", 3);\r\n        }\r\n        if(shader.shaderData.attribs[\"uvs\"] != -1) {\r\n            this.mesh.createBuffer(\"uvs\", 2);\r\n        }\r\n        if(shader.shaderData.attribs[\"colors\"] != -1) {\r\n            this.mesh.createBuffer(\"colors\", 4);\r\n        }\r\n    }\r\n\r\n    add(drawable) {\r\n        drawable.updateMatrix();\r\n\r\n        this.mesh.buffers.forEach((info, name) => {\r\n\r\n            const data = drawable.mesh.getBuffer(name).data;\r\n            \r\n            switch(name) {\r\n                case \"positions\": \r\n                    for(let i = 0; i < data.length; i += 3) {\r\n                        const vec = vec3.fromValues(data[i], data[i + 1], data[i + 2]);\r\n\r\n                        vec3.transformMat4(vec, vec, drawable.modelMatrix);\r\n\r\n                        for(let j = 0; j < 3; ++j) {\r\n                            info.data.push(vec[j]);\r\n                        }\r\n                    }\r\n                    \r\n                    break;\r\n                case \"index\":\r\n                    for (let i = 0; i < data.length; ++i) {\r\n                        info.data.push(data[i] + this.idx);\r\n                    }\r\n                    break;\r\n                default:\r\n                    for (let i = 0; i < data.length; ++i) {\r\n                        info.data.push(data[i]);\r\n                    }\r\n            }\r\n\r\n        });\r\n\r\n        this.idx += count;\r\n    }\r\n\r\n}\r\n\r\nexport {\r\n    DrawableGroup\r\n}", "import { Gol } from \"./gol\";\r\n\r\nclass Input {\r\n\r\n    static MAX_TOUCHES = 10;\r\n\r\n    touchInfo = [];\r\n\r\n    keyInfo = {\r\n        currentlyPressed: new Set(),\r\n        previouslyPressed: new Set(),\r\n        justPressed: new Set()\r\n    };\r\n\r\n    constructor() {\r\n        for (let i = 0; i < Input.MAX_TOUCHES; ++i) {\r\n            this.touchInfo[i] = {\r\n                x: null,\r\n                y: null,\r\n                isTouched: false,\r\n                wasTouched: false,\r\n                isJustTouched: false\r\n            };\r\n        }\r\n    }\r\n\r\n    isKeyPressed(key) {\r\n        return this.keyInfo.currentlyPressed.has(key);\r\n    }\r\n\r\n    isKeyClicked(key) {\r\n        return this.keyInfo.justPressed.has(key);\r\n    }\r\n\r\n    isTouched(touchId = 0) {\r\n        return this.touchInfo[touchId].isTouched;\r\n    }\r\n\r\n    isJustTouched(touchId = 0) {\r\n        return this.touchInfo[touchId].isJustTouched;\r\n    }\r\n\r\n    isMousePressed() {\r\n        return this.isTouched();\r\n    }\r\n\r\n    isMouseClicked() {\r\n        return this.isJustTouched();\r\n    }\r\n\r\n    getX(touchId = 0) {\r\n        return this.touchInfo[touchId].x;\r\n    }\r\n\r\n    getY(touchId = 0) {\r\n        return this.touchInfo[touchId].y;\r\n    }\r\n\r\n    initEvents() {\r\n\r\n        const canvas = Gol.graphics.canvas;\r\n\r\n        addEventListener(\"keydown\", (ev) => this.onKeyDown(ev));\r\n        addEventListener(\"keyup\", (ev) => this.onKeyUp(ev));\r\n\r\n        canvas.addEventListener(\"touchstart\", (ev) => this.handleTouchEvent(ev));\r\n        canvas.addEventListener(\"touchmove\", (ev) => this.handleTouchEvent(ev));\r\n        canvas.addEventListener(\"touchend\", (ev) => this.handleTouchEvent(ev));\r\n\r\n        canvas.addEventListener(\"mousedown\", (ev) => this.handleMouseEvent(ev));\r\n        canvas.addEventListener(\"mousemove\", (ev) => this.handleMouseEvent(ev));\r\n        canvas.addEventListener(\"mouseup\", (ev) => this.handleMouseEvent(ev));\r\n\r\n    }\r\n\r\n    handleTouchEvent(ev) {\r\n\r\n        const boundingRect = ev.target.getBoundingClientRect();\r\n\r\n        for (let touch of ev.changedTouches) {\r\n\r\n            const x = touch.pageX - boundingRect.x;\r\n            const y = touch.pageY - boundingRect.y;\r\n\r\n            const touchInfo = this.touchInfo[touch.identifier];\r\n\r\n            touchInfo.x = x;\r\n            touchInfo.y = boundingRect.height - y;\r\n\r\n            switch (ev.type) {\r\n                case \"touchstart\":\r\n                    touchInfo.isTouched = true;\r\n                    break;\r\n                case \"touchend\":\r\n                    touchInfo.isTouched = false;\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    handleMouseEvent(ev) {\r\n\r\n        const boundingRect = ev.target.getBoundingClientRect();\r\n        const x = ev.pageX - boundingRect.x;\r\n        const y = ev.pageY - boundingRect.y;\r\n\r\n        const touchInfo = this.touchInfo[0];\r\n\r\n        touchInfo.x = x;\r\n        touchInfo.y = boundingRect.height - y;\r\n\r\n        switch (ev.type) {\r\n            case \"mousedown\":\r\n                touchInfo.isTouched = true;\r\n                break;\r\n            case \"mouseup\":\r\n                touchInfo.isTouched = false;\r\n        }\r\n\r\n    }\r\n\r\n    onKeyDown(ev) {\r\n        this.keyInfo.currentlyPressed.add(ev.code);\r\n    }\r\n\r\n    onKeyUp(ev) {\r\n        this.keyInfo.currentlyPressed.delete(ev.code);\r\n    }\r\n\r\n    update() {\r\n\r\n        this.keyInfo.currentlyPressed.forEach((val) => {\r\n            if(!this.keyInfo.previouslyPressed.has(val)) {\r\n                this.keyInfo.justPressed.add(val);\r\n            }\r\n        });\r\n        this.keyInfo.previouslyPressed = new Set(this.keyInfo.currentlyPressed);\r\n\r\n        for(let info of this.touchInfo) {\r\n            info.isJustTouched = info.isTouched && !info.wasTouched;\r\n            info.wasTouched = info.isTouched;\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\nexport {\r\n    Input\r\n}", "import { LinearSpline } from \"./linear-spline.js\";\r\nimport { MathUtils } from \"./math-utils.js\";\r\nimport { Rectangle } from \"./rectangle.js\";\r\n\r\nexport {\r\n    MathUtils,\r\n    LinearSpline,\r\n    Rectangle\r\n}", "class Rectangle {\r\n\r\n    x;\r\n\r\n    y;\r\n\r\n    width;\r\n\r\n    height;\r\n\r\n    constructor(x, y, width, height) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n\r\n    setPosition(...args) {\r\n        if(args.length == 1) {\r\n            this.x = args[0][0];\r\n            this.y = args[0][1];\r\n        } else if(args.length == 2) {\r\n            this.x = args[0];\r\n            this.y = args[1];\r\n        } else {\r\n            throw new Error(\"1 or 2 arguments required\");\r\n        }\r\n        return this;\r\n    }\r\n\r\n    setSize(...args) {\r\n        if(args.length == 1) {\r\n            this.width = args[0][0];\r\n            this.height = args[0][1];\r\n        } else if(args.length == 2) {\r\n            this.width = args[0];\r\n            this.height = args[1];\r\n        } else {\r\n            throw new Error(\"1 or 2 arguments required\");\r\n        }\r\n        return this;\r\n    }\r\n\r\n    copy(r) {\r\n        this.x = r.x;\r\n        this.y = r.y;\r\n        this.width = r.width;\r\n        this.height = r.height;\r\n    }\r\n\r\n    clone() {\r\n        return new Rectangle(this.x, this.y, this.width, this.height);\r\n    }\r\n\r\n    containsPoint(...args) {\r\n        let x, y;\r\n\r\n        if(args.length == 2) {\r\n            x = args[0];\r\n            y = args[1];\r\n        } else if(args.length == 1) {\r\n            x = args[0][0];\r\n            y = args[0][1];\r\n        } else {\r\n            throw new Error(\"1 or 2 arguments required\");\r\n        }\r\n\r\n        return this.x <= x && \r\n            this.x + this.width >= x && \r\n            this.y <= y && \r\n            this.y + this.height >= y;\r\n    }\r\n\r\n    containsRectangle(rectangle) {\r\n        const xmin = rectangle.x;\r\n\t\tconst xmax = xmin + rectangle.width;\r\n\r\n\t\tconst ymin = rectangle.y;\r\n\t\tconst ymax = ymin + rectangle.height;\r\n\r\n\t\treturn xmin > this.x && xmin < this.x + this.width && \r\n            xmax > this.x && xmax < this.x + this.width && \r\n            ymin > this.y && ymin < this.y + this.height &&\r\n            ymax > this.y && ymax < this.y + this.height;\r\n    }\r\n\r\n    overlaps(r) {\r\n        return this.x < r.x + r.width && \r\n            this.x + this.width > r.x && \r\n            this.y < r.y + r.height && \r\n            this.y + this.height > r.y;\r\n    }\r\n\r\n    area() {\r\n        return this.width * this.height;\r\n    }\r\n\r\n    perimeter() {\r\n        return (this.width + this.height) * 2;\r\n    }\r\n\r\n}\r\n\r\nexport {\r\n    Rectangle\r\n}", "import { Gol } from \"./gol.js\";\r\nimport { MathUtils } from \"./math/math-utils.js\";\r\n\r\nclass AudioManager {\r\n    \r\n    /**\r\n     * \r\n     * @type {AudioContext}\r\n     */\r\n    audioContext;\r\n\r\n    /**\r\n     * \r\n     * @type {AudioBufferSourceNode}\r\n     */\r\n    bgMusicNode = null;\r\n\r\n    /**\r\n     * \r\n     * @type {GainNode}\r\n     */\r\n    masterGain;\r\n\r\n    /**\r\n     * \r\n     * @type {GainNode}\r\n     */\r\n    bgMusicGain;\r\n\r\n    /**\r\n     * \r\n     * @type {GainNode}\r\n     */\r\n    cueGain;\r\n\r\n    /**\r\n     * \r\n     * @type {AnalyserNode}\r\n     */\r\n    analyser;\r\n\r\n    /**\r\n     * \r\n     * @type {Uint8Array}\r\n     */\r\n    dataArray;\r\n\r\n    constructor() {\r\n\r\n        this.audioContext = new AudioContext();\r\n\r\n        this.masterGain = this.audioContext.createGain();\r\n        this.masterGain.connect(this.audioContext.destination);\r\n        this.masterGain.gain.value = 1.0;\r\n\r\n        this.bgMusicGain = this.audioContext.createGain();\r\n        this.bgMusicGain.connect(this.masterGain);\r\n        this.bgMusicGain.gain.value = 1.0;\r\n\r\n        this.cueGain = this.audioContext.createGain();\r\n        this.cueGain.connect(this.masterGain);\r\n        this.cueGain.gain.value = 1.0;\r\n\r\n        this.analyser = this.audioContext.createAnalyser();\r\n        this.analyser.connect(this.audioContext.destination);\r\n        this.dataArray = new Uint8Array(this.analyser.frequencyBinCount);\r\n    }\r\n\r\n    get masterVolume() {\r\n        return this.masterGain.gain.value;\r\n    }\r\n\r\n    set masterVolume(val) {\r\n        this.masterGain.gain.value = MathUtils.sat(val);\r\n    }\r\n\r\n    get bgMusicVolume() {\r\n        return this.bgMusicGain.gain.value;\r\n    }\r\n\r\n    set bgMusicVolume(val) {\r\n        this.bgMusicGain.gain.value = MathUtils.sat(val);\r\n    }\r\n\r\n    get cueVolume() {\r\n        return this.cueGain.gain.value;\r\n    }\r\n\r\n    set cueVolume(val) {\r\n        this.cueGain.gain.value = MathUtils.sat(val);\r\n    }\r\n\r\n    setFrequencyDataSize(size) {\r\n        if(!MathUtils.isPowerOf2(size) && size < 16) {\r\n            throw new Error(\"size must be power of 2 and equal or bigger than 16\");\r\n        }\r\n        this.analyser.fftSize = size * 2;\r\n        this.dataArray = new Uint8Array(this.analyser.frequencyBinCount);\r\n    }\r\n\r\n    getFrequencyData() {\r\n        this.analyser.getByteFrequencyData(this.dataArray);\r\n        return this.dataArray;\r\n    }\r\n\r\n    playBgMusic(clipName, params = {}) {\r\n        const loop = params.loop === undefined ? true : params.loop;\r\n        const time = params.time === undefined ? 0 : params.time;\r\n\r\n        const clipData = Gol.files.get(clipName);\r\n\r\n        this.stopBgMusic();\r\n\r\n        this.bgMusicNode = this.audioContext.createBufferSource();\r\n        this.bgMusicNode.buffer = clipData;\r\n        this.bgMusicNode.loop = loop;\r\n        this.bgMusicNode.start(time);\r\n\r\n        this.bgMusicNode.connect(this.bgMusicGain);\r\n        this.bgMusicNode.connect(this.analyser);\r\n\r\n    }\r\n\r\n    stopBgMusic() {\r\n        if(this.isBgMusicPlaying()) {\r\n            this.bgMusicNode.stop(0);\r\n            this.bgMusicNode = null;\r\n        }\r\n    }\r\n\r\n    isBgMusicPlaying() {\r\n        return !(this.bgMusicNode === null);\r\n    }\r\n\r\n    playCue(clipName, volume = 1.0) {\r\n        const clipData = Gol.files.get(clipName);\r\n\r\n        const cueNode = this.audioContext.createBufferSource();\r\n        cueNode.buffer = clipData;\r\n        cueNode.start(0);\r\n\r\n        const gain = this.audioContext.createGain();\r\n        gain.connect(this.cueGain);\r\n        gain.gain.value = MathUtils.sat(volume);\r\n\r\n        cueNode.connect(gain);\r\n    }\r\n\r\n    onResume() {\r\n        if(this.audioContext.state == \"suspended\") {\r\n            this.audioContext.resume();\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport {\r\n    AudioManager\r\n}", "\r\nclass Device {\r\n\r\n    /**\r\n     * \r\n     * @type {string}\r\n     */\r\n    type;\r\n\r\n    constructor() {\r\n\r\n        this.detectDeviceType();\r\n    }\r\n\r\n    detectDeviceType() {\r\n        const ua = navigator.userAgent;\r\n\r\n        if(/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini|Windows Phone/i.test(ua)) {\r\n            this.type = \"mobile\";\r\n        } else {\r\n            this.type = \"desktop\";\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport {\r\n    Device\r\n}", "import { Files } from \"./files.js\";\r\nimport { Game } from \"./game.js\";\r\nimport { Graphics } from \"./graphics.js\";\r\nimport * as graphics from \"./graphics/_index.js\";\r\nimport { Input } from \"./input.js\";\r\nimport * as glMatrix from \"gl-matrix\";\r\nimport * as math from \"./math/_index.js\";\r\nimport { AudioManager } from \"./audio-manager.js\";\r\nimport { Device } from \"./device.js\";\r\nimport { Screen } from \"./screen.js\";\r\n\r\n/** \r\n * Environment class holding references to the {@link Graphics}, {@link Files},\r\n * {@link Input}, {@link AudioManager} and {@link Device} instances.  \r\n * \r\n * @author DonDejvo\r\n */\r\nclass Gol {\r\n\r\n    /**\r\n     * \r\n     * @type {Graphics}\r\n     */\r\n    static graphics;\r\n\r\n    /**\r\n     * \r\n     * @type {Files}\r\n     */\r\n    static files;\r\n\r\n    /**\r\n     * \r\n     * @type {Input}\r\n     */\r\n    static input;\r\n\r\n    /**\r\n     * \r\n     * @type {AudioManager}\r\n     */\r\n    static audio;\r\n\r\n    /**\r\n     * \r\n     * @type {Device}\r\n     */\r\n    static device;\r\n    \r\n    /**\r\n     * \r\n     * \r\n     * @param {Game} game \r\n     */\r\n    static async init(game) {\r\n        this.graphics = new Graphics(game);\r\n        this.files = new Files();\r\n        this.input = new Input();\r\n        this.audio = new AudioManager();\r\n        this.device = new Device();\r\n\r\n        for(let eventType of [\"mousedown\", \"touchdown\", \"keydown\"]) {\r\n            addEventListener(eventType, () => this.audio.onResume());\r\n        }\r\n\r\n        this.input.initEvents();\r\n\r\n        this.graphics.compileShaders();\r\n        this.graphics.generateFonts();\r\n        \r\n        game.preload();\r\n        await this.files.waitForAssetsToLoad();\r\n\r\n        game.create();\r\n\r\n        addEventListener(\"resize\", () => this.graphics.onResize());\r\n        this.graphics.onResize();\r\n        this.graphics.onResume();\r\n    }\r\n\r\n    /**\r\n     * Returns reference for WebGL context.\r\n     */\r\n    static get gl() {\r\n        return this.graphics.gl;\r\n    }\r\n\r\n}\r\n\r\nexport {\r\n    Gol,\r\n    Game,\r\n    graphics,\r\n    glMatrix,\r\n    math,\r\n    Screen\r\n}"],
  "mappings": "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",
  "names": []
}
